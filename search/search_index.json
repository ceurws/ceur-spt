{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyCEURspt API Documentation","text":""},{"location":"#ceurspt.bibtex","title":"<code>bibtex</code>","text":""},{"location":"#ceurspt.bibtex.BibTexConverter","title":"<code>BibTexConverter</code>","text":"<p>Convert volumes and papers to corresponding bibtex entries</p> Source code in <code>ceurspt/bibtex.py</code> <pre><code>class BibTexConverter:\n    \"\"\"\n    Convert volumes and papers to corresponding bibtex entries\n    \"\"\"\n\n    @classmethod\n    def convert_volume(cls, volume: Volume) -&gt; str:\n        \"\"\"\n        convert given volume to biblatex entry\n        \"\"\"\n        library = BibDatabase()\n        proceedings_entry = ProceedingsEntry.from_volume(volume)\n        library.entries.append(proceedings_entry.to_bibtex_record())\n        for paper in volume.papers:\n            in_proceedings_entry = InProceedingsEntry.from_paper(paper)\n            library.entries.append(\n                in_proceedings_entry.to_bibtex_record(\n                    crossref=proceedings_entry.get_id()\n                )\n            )\n        bibtex = bibtexparser.dumps(library)\n        return bibtex\n\n    @classmethod\n    def convert_paper(cls, paper: Paper) -&gt; str:\n        \"\"\"\n        convert given paper to biblatex entry\n        \"\"\"\n        library = BibDatabase()\n        in_proceedings_entry = InProceedingsEntry.from_paper(paper)\n        library.entries.append(in_proceedings_entry.to_bibtex_record())\n        bibtex = bibtexparser.dumps(library)\n        return bibtex\n</code></pre>"},{"location":"#ceurspt.bibtex.BibTexConverter.convert_paper","title":"<code>convert_paper(paper)</code>  <code>classmethod</code>","text":"<p>convert given paper to biblatex entry</p> Source code in <code>ceurspt/bibtex.py</code> <pre><code>@classmethod\ndef convert_paper(cls, paper: Paper) -&gt; str:\n    \"\"\"\n    convert given paper to biblatex entry\n    \"\"\"\n    library = BibDatabase()\n    in_proceedings_entry = InProceedingsEntry.from_paper(paper)\n    library.entries.append(in_proceedings_entry.to_bibtex_record())\n    bibtex = bibtexparser.dumps(library)\n    return bibtex\n</code></pre>"},{"location":"#ceurspt.bibtex.BibTexConverter.convert_volume","title":"<code>convert_volume(volume)</code>  <code>classmethod</code>","text":"<p>convert given volume to biblatex entry</p> Source code in <code>ceurspt/bibtex.py</code> <pre><code>@classmethod\ndef convert_volume(cls, volume: Volume) -&gt; str:\n    \"\"\"\n    convert given volume to biblatex entry\n    \"\"\"\n    library = BibDatabase()\n    proceedings_entry = ProceedingsEntry.from_volume(volume)\n    library.entries.append(proceedings_entry.to_bibtex_record())\n    for paper in volume.papers:\n        in_proceedings_entry = InProceedingsEntry.from_paper(paper)\n        library.entries.append(\n            in_proceedings_entry.to_bibtex_record(\n                crossref=proceedings_entry.get_id()\n            )\n        )\n    bibtex = bibtexparser.dumps(library)\n    return bibtex\n</code></pre>"},{"location":"#ceurspt.bibtex.InProceedingsEntry","title":"<code>InProceedingsEntry</code>  <code>dataclass</code>","text":"<p>see https://ftp.mpi-inf.mpg.de/pub/tex/mirror/ftp.dante.de/pub/tex/macros/latex/contrib/biblatex/doc/biblatex.pdf</p> Source code in <code>ceurspt/bibtex.py</code> <pre><code>@dataclass\nclass InProceedingsEntry:\n    \"\"\"\n    see https://ftp.mpi-inf.mpg.de/pub/tex/mirror/ftp.dante.de/pub/tex/macros/latex/contrib/biblatex/doc/biblatex.pdf\n    \"\"\"\n\n    title: str\n    author: Union[str, List[str]]\n    booktitle: str\n    year: str\n    date: str\n\n    editor: Optional[Union[str, List[str]]] = None\n    subtitle: Optional[str] = None\n    titleaddon: Optional[str] = None\n    maintitle: Optional[str] = None\n\n    mainsubtitle: Optional[str] = None\n    maintitleaddon: Optional[str] = None\n    booksubtitle: Optional[str] = None\n    booktitleaddon: Optional[str] = None\n\n    eventtitle: Optional[str] = None\n    eventtitleaddon: Optional[str] = None\n    eventdate: Optional[str] = None\n    venue: Optional[str] = None\n    language: Optional[str] = \"english\"\n\n    volume: Optional[str] = None\n    part: Optional[str] = None\n    volumes: Optional[str] = None\n    series: Optional[str] = \"CEUR Workshop Proceedings\"\n    number: Optional[str] = None\n    note: Optional[str] = None\n    organization: Optional[str] = None\n\n    publisher: Optional[str] = None\n    location: Optional[str] = \"Aachen\"\n    month: Optional[str] = None\n    isbn: Optional[str] = None\n    eid: Optional[str] = None\n    chapter: Optional[str] = None\n    pages: Optional[str] = None\n    addendum: Optional[str] = None\n\n    pubstate: Optional[str] = None\n    doi: Optional[str] = None\n    eprint: Optional[str] = None\n    eprintclass: Optional[str] = None\n    eprinttype: Optional[str] = None\n    url: Optional[str] = None\n    urldate: Optional[str] = None\n\n    @classmethod\n    def from_paper(cls, paper: Paper) -&gt; \"InProceedingsEntry\":\n        record = paper.getMergedDict()\n        pub_date = (\n            datetime.fromisoformat(record.get(\"spt.volume\").get(\"date\"))\n            if record.get(\"spt.volume\") is not None\n            else None\n        )\n        authors = record.get(\"cvb.authors\", None)\n        if authors is not None:\n            if isinstance(authors, str):\n                authors = authors.replace(\",\", \" and \")\n        elif \"dblp.authors\" in record:\n            authors = \" and \".join(\n                [\n                    author_record.get(\"label\")\n                    for author_record in record.get(\"dblp.authors\")\n                ]\n            )\n        in_proceedings = InProceedingsEntry(\n            title=record.get(\"spt.title\", None),\n            author=authors,\n            year=str(pub_date.year),\n            date=pub_date.date().isoformat(),\n            booktitle=record.get(\"spt.volume\", {}).get(\"title\", None),\n            url=(\n                str(record.get(\"spt.pdfUrl\"))\n                if record.get(\"spt.pdfUrl\", None)\n                else None\n            ),\n            volume=str(record.get(\"spt.volume\", {}).get(\"number\")),\n        )\n        if hasattr(paper, \"vm\") and isinstance(paper.vm, Volume):\n            volume_record = paper.vm.getMergedDict()\n            in_proceedings.eventtitle = volume_record.get(\"wd.eventLabel\", None)\n            in_proceedings.eventdate = volume_record.get(\"wd.startDate\", None)\n            in_proceedings.venue = \",\".join(\n                filter(\n                    partial(is_not, None),\n                    [\n                        volume_record.get(\"wd.locationLabel\", None),\n                        volume_record.get(\"wd.countryLabel\", None),\n                    ],\n                )\n            )\n            in_proceedings.editor = volume_record.get(\"cvb.editors\", \"\").replace(\n                \",\", \" and\"\n            )\n        in_proceedings.__paper = paper\n        return in_proceedings\n\n    def to_bibtex_record(self, crossref: Optional[str] = None) -&gt; dict:\n        \"\"\"\n        Convert to bibtex compatible dict\n        Args:\n            crossref: bibtex key of the proceedings. If set the proceeding specific fields are excluded.\n        \"\"\"\n        proceedings_keys = [\n            \"series\",\n            \"location\",\n            \"eventtitle\",\n            \"venue\",\n            \"volume\",\n            \"editor\",\n            \"eventdate\",\n        ]\n        record_fields = {k: v for k, v in asdict(self).items() if v not in [None, \"\"]}\n        if crossref is not None:\n            record_fields = {\n                k: v for k, v in record_fields.items() if k not in proceedings_keys\n            }\n            record_fields[\"crossref\"] = crossref\n        record = {\n            \"ENTRYTYPE\": \"inproceedings\",\n            \"ID\": f\"ceur-ws:{self.get_id()}\",\n            **record_fields,\n        }\n        return record\n\n    def get_id(self) -&gt; str:\n        entry_id = None\n        try:\n            entry_id = (\n                self.__paper.getMergedDict().get(\"spt.id\", None).replace(\"/\", \":\")\n            )\n        except KeyError:\n            pass\n        return entry_id\n</code></pre>"},{"location":"#ceurspt.bibtex.InProceedingsEntry.to_bibtex_record","title":"<code>to_bibtex_record(crossref=None)</code>","text":"<p>Convert to bibtex compatible dict Args:     crossref: bibtex key of the proceedings. If set the proceeding specific fields are excluded.</p> Source code in <code>ceurspt/bibtex.py</code> <pre><code>def to_bibtex_record(self, crossref: Optional[str] = None) -&gt; dict:\n    \"\"\"\n    Convert to bibtex compatible dict\n    Args:\n        crossref: bibtex key of the proceedings. If set the proceeding specific fields are excluded.\n    \"\"\"\n    proceedings_keys = [\n        \"series\",\n        \"location\",\n        \"eventtitle\",\n        \"venue\",\n        \"volume\",\n        \"editor\",\n        \"eventdate\",\n    ]\n    record_fields = {k: v for k, v in asdict(self).items() if v not in [None, \"\"]}\n    if crossref is not None:\n        record_fields = {\n            k: v for k, v in record_fields.items() if k not in proceedings_keys\n        }\n        record_fields[\"crossref\"] = crossref\n    record = {\n        \"ENTRYTYPE\": \"inproceedings\",\n        \"ID\": f\"ceur-ws:{self.get_id()}\",\n        **record_fields,\n    }\n    return record\n</code></pre>"},{"location":"#ceurspt.bibtex.ProceedingsEntry","title":"<code>ProceedingsEntry</code>  <code>dataclass</code>","text":"<p>see https://ftp.mpi-inf.mpg.de/pub/tex/mirror/ftp.dante.de/pub/tex/macros/latex/contrib/biblatex/doc/biblatex.pdf</p> Source code in <code>ceurspt/bibtex.py</code> <pre><code>@dataclass\nclass ProceedingsEntry:\n    \"\"\"\n    see https://ftp.mpi-inf.mpg.de/pub/tex/mirror/ftp.dante.de/pub/tex/macros/latex/contrib/biblatex/doc/biblatex.pdf\n\n    \"\"\"\n\n    title: str\n    year: str\n    date: str\n\n    editor: Optional[Union[str, List[str]]] = None\n    subtitle: Optional[str] = None\n    titleaddon: Optional[str] = None\n    maintitle: Optional[str] = None\n    mainsubtitle: Optional[str] = None\n    maintitleaddon: Optional[str] = None\n    eventtitle: Optional[str] = None\n    eventtitleaddon: Optional[str] = None\n    eventdate: Optional[str] = None\n    venue: Optional[str] = None\n    language: Optional[str] = \"english\"\n    volume: Optional[str] = None\n    part: Optional[str] = None\n    volumes: Optional[str] = None\n    series: Optional[str] = \"CEUR Workshop Proceedings\"\n\n    number: Optional[str] = None\n    note: Optional[str] = None\n    organization: Optional[str] = None\n    publisher: Optional[str] = None\n    location: Optional[str] = \"Aachen\"\n    month: Optional[str] = None\n    isbn: Optional[str] = None\n\n    eid: Optional[str] = None\n    chapter: Optional[str] = None\n    pages: Optional[str] = None\n    pagetotal: Optional[str] = None\n    addendum: Optional[str] = None\n    pubstate: Optional[str] = None\n    doi: Optional[str] = None\n    eprint: Optional[str] = None\n\n    eprintclass: Optional[str] = None\n    eprinttype: Optional[str] = None\n    url: Optional[str] = None\n    urldate: Optional[str] = None\n\n    @classmethod\n    def from_volume(cls, volume: Volume) -&gt; \"ProceedingsEntry\":\n        \"\"\"\n        Convert given volume to ProceedingsEntry\n        \"\"\"\n        record = volume.getMergedDict()\n        pub_date = (\n            datetime.fromisoformat(record.get(\"wd.publication_date\"))\n            if record.get(\"wd.publication_date\") is not None\n            else None\n        )\n        proceeding = ProceedingsEntry(\n            title=volume.title,\n            date=pub_date.date().isoformat(),\n            year=str(pub_date.year) if pub_date else None,\n            url=record.get(\"spt.url\"),\n            eventtitle=record.get(\"wd.eventLabel\", None),\n            eventdate=record.get(\"wd.startDate\", None),\n            venue=\",\".join(\n                filter(\n                    partial(is_not, None),\n                    [\n                        record.get(\"wd.locationLabel\", None),\n                        record.get(\"wd.countryLabel\", None),\n                    ],\n                )\n            ),\n            volume=str(volume.number),\n            editor=record.get(\"cvb.editors\", \"\").replace(\",\", \" and\"),\n        )\n        proceeding.__volume = volume\n        return proceeding\n\n    def to_bibtex_record(self) -&gt; dict:\n        record = {\n            \"ENTRYTYPE\": \"proceedings\",\n            \"ID\": self.get_id(),\n            **{k: v for k, v in asdict(self).items() if v not in [None, \"\"]},\n        }\n        return record\n\n    def get_id(self) -&gt; str:\n        entry_id = None\n        if hasattr(self, \"__volume\") and isinstance(self.__volume, Volume):\n            entry_id = self.__volume.acronym.replace(\" \", \"_\")\n        if entry_id is None:\n            entry_id = f\"ceur-ws:Vol-{self.volume}\"\n        return entry_id\n</code></pre>"},{"location":"#ceurspt.bibtex.ProceedingsEntry.from_volume","title":"<code>from_volume(volume)</code>  <code>classmethod</code>","text":"<p>Convert given volume to ProceedingsEntry</p> Source code in <code>ceurspt/bibtex.py</code> <pre><code>@classmethod\ndef from_volume(cls, volume: Volume) -&gt; \"ProceedingsEntry\":\n    \"\"\"\n    Convert given volume to ProceedingsEntry\n    \"\"\"\n    record = volume.getMergedDict()\n    pub_date = (\n        datetime.fromisoformat(record.get(\"wd.publication_date\"))\n        if record.get(\"wd.publication_date\") is not None\n        else None\n    )\n    proceeding = ProceedingsEntry(\n        title=volume.title,\n        date=pub_date.date().isoformat(),\n        year=str(pub_date.year) if pub_date else None,\n        url=record.get(\"spt.url\"),\n        eventtitle=record.get(\"wd.eventLabel\", None),\n        eventdate=record.get(\"wd.startDate\", None),\n        venue=\",\".join(\n            filter(\n                partial(is_not, None),\n                [\n                    record.get(\"wd.locationLabel\", None),\n                    record.get(\"wd.countryLabel\", None),\n                ],\n            )\n        ),\n        volume=str(volume.number),\n        editor=record.get(\"cvb.editors\", \"\").replace(\",\", \" and\"),\n    )\n    proceeding.__volume = volume\n    return proceeding\n</code></pre>"},{"location":"#ceurspt.ceurws","title":"<code>ceurws</code>","text":"<p>Created on 2023-03-18</p> <p>@author: wf</p>"},{"location":"#ceurspt.ceurws.JsonCacheManager","title":"<code>JsonCacheManager</code>","text":"<p>a json based cache manager</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>class JsonCacheManager:\n    \"\"\"\n    a json based cache manager\n    \"\"\"\n\n    def __init__(self, base_url: str = \"http://cvb.bitplan.com\"):\n        \"\"\"\n        constructor\n\n        base_url(str): the base url to use for the json provider\n        \"\"\"\n        self.base_url = base_url\n\n    def json_path(self, lod_name: str) -&gt; str:\n        \"\"\"\n        get the json path for the given list of dicts name\n\n        Args:\n            lod_name(str): the name of the list of dicts cache to read\n\n        Returns:\n            str: the path to the list of dict cache\n        \"\"\"\n        root_path = f\"{Path.home()}/.ceurws\"\n        os.makedirs(root_path, exist_ok=True)\n        json_path = f\"{root_path}/{lod_name}.json\"\n        return json_path\n\n    def load_lod(self, lod_name: str) -&gt; list:\n        \"\"\"\n        load my list of dicts\n\n        Args:\n            lod_name(str): the name of the list of dicts cache to read\n\n        Returns:\n            list: the list of dicts\n        \"\"\"\n        json_path = self.json_path(lod_name)\n        if os.path.isfile(json_path):\n            try:\n                with open(json_path) as json_file:\n                    json_str = json_file.read()\n                    lod = orjson.loads(json_str)\n            except Exception as ex:\n                msg = f\"Could not read {lod_name} from {json_path} due to {str(ex)}\"\n                raise Exception(msg)\n        else:\n            try:\n                url = f\"{self.base_url}/{lod_name}.json\"\n                with urllib.request.urlopen(url) as source:\n                    json_str = source.read()\n                    lod = orjson.loads(json_str)\n            except Exception as ex:\n                msg = f\"Could not read {lod_name} from {url} due to {str(ex)}\"\n                raise Exception(msg)\n        return lod\n\n    def store(self, lod_name: str, lod: list):\n        \"\"\"\n        store my list of dicts\n\n        Args:\n            lod_name(str): the name of the list of dicts cache to write\n            lod(list): the list of dicts to write\n        \"\"\"\n        with open(self.json_path(lod_name), \"wb\") as json_file:\n            json_str = orjson.dumps(lod)\n            json_file.write(json_str)\n            pass\n</code></pre>"},{"location":"#ceurspt.ceurws.JsonCacheManager.__init__","title":"<code>__init__(base_url='http://cvb.bitplan.com')</code>","text":"<p>constructor</p> <p>base_url(str): the base url to use for the json provider</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def __init__(self, base_url: str = \"http://cvb.bitplan.com\"):\n    \"\"\"\n    constructor\n\n    base_url(str): the base url to use for the json provider\n    \"\"\"\n    self.base_url = base_url\n</code></pre>"},{"location":"#ceurspt.ceurws.JsonCacheManager.json_path","title":"<code>json_path(lod_name)</code>","text":"<p>get the json path for the given list of dicts name</p> <p>Parameters:</p> Name Type Description Default <code>lod_name(str)</code> <p>the name of the list of dicts cache to read</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the path to the list of dict cache</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def json_path(self, lod_name: str) -&gt; str:\n    \"\"\"\n    get the json path for the given list of dicts name\n\n    Args:\n        lod_name(str): the name of the list of dicts cache to read\n\n    Returns:\n        str: the path to the list of dict cache\n    \"\"\"\n    root_path = f\"{Path.home()}/.ceurws\"\n    os.makedirs(root_path, exist_ok=True)\n    json_path = f\"{root_path}/{lod_name}.json\"\n    return json_path\n</code></pre>"},{"location":"#ceurspt.ceurws.JsonCacheManager.load_lod","title":"<code>load_lod(lod_name)</code>","text":"<p>load my list of dicts</p> <p>Parameters:</p> Name Type Description Default <code>lod_name(str)</code> <p>the name of the list of dicts cache to read</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>the list of dicts</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def load_lod(self, lod_name: str) -&gt; list:\n    \"\"\"\n    load my list of dicts\n\n    Args:\n        lod_name(str): the name of the list of dicts cache to read\n\n    Returns:\n        list: the list of dicts\n    \"\"\"\n    json_path = self.json_path(lod_name)\n    if os.path.isfile(json_path):\n        try:\n            with open(json_path) as json_file:\n                json_str = json_file.read()\n                lod = orjson.loads(json_str)\n        except Exception as ex:\n            msg = f\"Could not read {lod_name} from {json_path} due to {str(ex)}\"\n            raise Exception(msg)\n    else:\n        try:\n            url = f\"{self.base_url}/{lod_name}.json\"\n            with urllib.request.urlopen(url) as source:\n                json_str = source.read()\n                lod = orjson.loads(json_str)\n        except Exception as ex:\n            msg = f\"Could not read {lod_name} from {url} due to {str(ex)}\"\n            raise Exception(msg)\n    return lod\n</code></pre>"},{"location":"#ceurspt.ceurws.JsonCacheManager.store","title":"<code>store(lod_name, lod)</code>","text":"<p>store my list of dicts</p> <p>Parameters:</p> Name Type Description Default <code>lod_name(str)</code> <p>the name of the list of dicts cache to write</p> required <code>lod(list)</code> <p>the list of dicts to write</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def store(self, lod_name: str, lod: list):\n    \"\"\"\n    store my list of dicts\n\n    Args:\n        lod_name(str): the name of the list of dicts cache to write\n        lod(list): the list of dicts to write\n    \"\"\"\n    with open(self.json_path(lod_name), \"wb\") as json_file:\n        json_str = orjson.dumps(lod)\n        json_file.write(json_str)\n        pass\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper","title":"<code>Paper</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Paper</code></p> <p>a CEUR-WS Paper with it's behavior</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>class Paper(ceurspt.ceurws_base.Paper):\n    \"\"\"\n    a CEUR-WS Paper with it's behavior\n    \"\"\"\n\n    def getBasePath(self) -&gt; Optional[str]:\n        \"\"\"\n        get the base path to my files\n        \"\"\"\n        if self.pdfUrl:\n            base_path = self.pdfUrl.replace(\"https://ceur-ws.org/\", \"\")\n            base_path = base_path.replace(\".pdf\", \"\")\n            base_path = f\"{self.volume.vm.base_path}/{base_path}\"\n            if os.path.isfile(f\"{base_path}.pdf\"):\n                return base_path\n        return None\n\n    def getContentPathByPostfix(self, postfix: str):\n        \"\"\"\n        get the content path for the given postfix\n\n        Args:\n            postfix(str): the postfix to read\n\n        Returns:\n            str: the context path\n        \"\"\"\n        base_path = self.getBasePath()\n        if base_path is None:\n            return None\n        text_path = f\"{base_path}{postfix}\"\n        if os.path.isfile(text_path):\n            return text_path\n        else:\n            return None\n\n    def getContentByPostfix(self, postfix: str) -&gt; str:\n        \"\"\"\n        get the content for the given postfix\n\n        Args:\n            postfix(str): the postfix to read\n\n        Returns:\n            str: the context\n        \"\"\"\n        text_path = self.getContentPathByPostfix(postfix)\n        content = None\n        if text_path:\n            with open(text_path, \"r\") as text_file:\n                content = text_file.read()\n        return content\n\n    def getText(self) -&gt; str:\n        \"\"\"\n        get the plain text content of this paper\n        \"\"\"\n        text = self.getContentByPostfix(\"-content.txt\")\n        return text\n\n    def getPdf(self):\n        \"\"\"\n        get the PDF file for this paper\n        \"\"\"\n        base_path = self.getBasePath()\n        pdf = f\"{base_path}.pdf\"\n        return pdf\n\n    def getMergedDict(self) -&gt; dict:\n        \"\"\"\n        get the merged dict for this paper\n        \"\"\"\n        my_dict = dataclasses.asdict(self)\n        m_dict = {\n            \"version.version\": Version.version,\n            \"version.cm_url\": Version.cm_url,\n            \"spt.html_url\": f\"/{self.id}.html\",\n        }\n        for key, value in my_dict.items():\n            m_dict[f\"spt.{key}\"] = value\n        pdf_name = self.pdfUrl.replace(\"https://ceur-ws.org/\", \"\")\n        if pdf_name in self.pm.paper_records_by_path:\n            pdf_record = self.pm.paper_records_by_path[pdf_name]\n            for key, value in pdf_record.items():\n                m_dict[f\"cvb.{key}\"] = value\n        if pdf_name in self.pm.paper_dblp_by_path:\n            dblp_record = self.pm.paper_dblp_by_path[pdf_name]\n            for key, value in dblp_record.items():\n                m_dict[f\"dblp.{key}\"] = value\n        return m_dict\n\n    def as_wb_dict(self) -&gt; dict:\n        \"\"\"\n        wb create-entity '{\"labels\":{\"en\":\"a label\",\"fr\":\"un label\"},\"descriptions\":{\"en\":\"some description\",\"fr\":\"une description\"},\"claims\":{\"P1775\":[\"Q3576110\",\"Q12206942\"],\"P2002\":\"bulgroz\"}}'\n        \"\"\"\n        wb = {\n            \"labels\": {\"en\": self.title},\n            \"descriptions\": {\n                \"en\": f\"scientific paper published in CEUR-WS Volume {self.volume.number}\"\n            },\n            \"claims\": {\n                # P31  :instance of  Q13442814:scholarly article\n                \"P31\": \"Q13442814\",\n                #  P1433: published in\n                \"P1433\": self.volume.wikidataid,\n                # P1476:title\n                \"P1476\": {\"text\": self.title, \"language\": \"en\"},\n                # P407 :language of work or name  Q1860:English\n                \"P407\": \"Q1860\",\n                #  P953 :full work available at URL\n                \"P953\": self.pdfUrl,\n                # P50: author, P1545: series ordinal\n                \"P50\": [],\n                # P2093: author name string, P1545: series ordinal\n                \"P2093\": [],\n            },\n        }\n        author_claims = wb[\"claims\"][\"P50\"]\n        author_name_claims = wb[\"claims\"][\"P2093\"]\n        authors = self.getAuthors()\n        for index, author in enumerate(authors):\n            if not author.wikidata_id:\n                author_name_claims.append(\n                    {\"value\": author.name, \"qualifiers\": {\"P1545\": f\"{index+1}\"}}\n                )\n            else:\n                author_claims.append(\n                    {\"value\": author.wikidata_id, \"qualifiers\": {\"P1545\": f\"{index+1}\"}}\n                )\n        return wb\n\n    def as_wbi_cli_text(self, qid: str) -&gt; str:\n        \"\"\"\n        Generates a series of Wikibase CLI command strings to add claims to the entity\n        represented by this paper, based on the provided QID.\n\n        Args:\n            qid (str): The QID of the Wikibase item to which the claims will be added.\n\n        Returns:\n            str: A string containing all the 'wb add-claim' commands separated by newlines.\n        \"\"\"\n        # Get the dictionary representation of the paper\n        wb_dict = self.as_wb_dict()\n\n        # Initialize an empty list to hold all commands\n        cli_commands = []\n\n        # Iterate through each claim to create a separate wb add-claim command\n        for prop, value in wb_dict[\"claims\"].items():\n            # Handle different structures in claims (e.g., simple vs. complex with qualifiers)\n            if isinstance(\n                value, list\n            ):  # Expecting a list of values (or complex value structures)\n                for val in value:\n                    # Convert value to a JSON string and escape quotes for command line\n                    val_json = json.dumps(val).replace('\"', '\\\\\"')\n                    cli_commands.append(f'wb add-claim {qid} {prop} \"{val_json}\"')\n            else:  # A single value or simple structure\n                # Convert value to a JSON string and escape quotes for command line\n                value_json = json.dumps(value).replace('\"', '\\\\\"')\n                cli_commands.append(f'wb add-claim {qid} {prop} \"{value_json}\"')\n\n        # Combine all commands into a single string separated by newlines\n        cli = \"\\n\".join(cli_commands)\n        return cli\n\n    def as_quickstatements(self) -&gt; str:\n        \"\"\"\n        return my quickstatements\n        \"\"\"\n        m_dict = self.getMergedDict()\n        paper_date_str = self.volume.date\n        paper_date = datetime.strptime(paper_date_str, \"%Y-%m-%d\")\n        qs_date = f\"+{paper_date.isoformat(sep='T',timespec='auto')}Z/11\"\n        qs = f\"\"\"# created by {__file__}\nCREATE\n# P31  :instance of  Q13442814:scholarly article\nLAST|P31|Q13442814\n# P1433: published in \nLAST|P1433|{self.volume.wikidataid}\n# english label\nLAST|Len|\"{self.title}\"\n# english description\nLAST|Den|\"scientific paper published in CEUR-WS Volume {self.volume.number}\"\n# P1476:title\nLAST|P1476|en:\"{self.title}\"\n# P407 :language of work or name  Q1860:English\nLAST|P407|Q1860\n# P953 :full work available at URL\nLAST|P953|\"{self.pdfUrl}\"\n# P577 :publication date\nLAST|P577|{qs_date}\n\"\"\"\n        # @TODO pages ...\n        authors = self.getAuthors()\n        for index, author in enumerate(authors):\n            if not author.wikidata_id:\n                qs += f\"\"\"# P2093: author name string, P1545: series ordinal\nLAST|P2093|\"{author.name}\"|P1545|\"{index+1}\"\n\"\"\"\n            else:\n                qs += f\"\"\"# P50: author, P1545: series ordinal\nLAST|P50|{author.wikidata_id}|P1545|\"{index+1}\"       \n\"\"\"\n            pass\n        return qs\n\n    def as_smw_markup(self) -&gt; str:\n        \"\"\"\n        return my semantic mediawiki markup\n\n        Returns:\n            str: the smw markup for this paper\n        \"\"\"\n        m_dict = self.getMergedDict()\n        self.authors = m_dict[\"cvb.authors\"]\n        if \"dblp.dblp_publication_id\" in m_dict:\n            self.dblpUrl = m_dict[\"dblp.dblp_publication_id\"]\n        markup = f\"\"\"=Paper=\n{{{{Paper\n|id={self.id}\n|storemode=property\n|title={self.title}\n|pdfUrl={self.pdfUrl}\n|volume=Vol-{self.volume.number}\n\"\"\"\n        for attr in [\"authors\", \"wikidataid\", \"dblpUrl\"]:\n            if hasattr(self, attr):\n                value = getattr(self, attr)\n                if value:\n                    markup += f\"|{attr}={value}\\n\"\n        markup += f\"\"\"}}}}\n=={self.title}==\n&lt;pdf width=\"1500px\"&gt;{self.pdfUrl}&lt;/pdf&gt;\n&lt;pre&gt;\n{self.getText()}\n&lt;/pre&gt;\n        \"\"\"\n        return markup\n\n    def getAuthorIndex(self, name: str, authors: typing.List[str]):\n        \"\"\"\n        get the author index\n        \"\"\"\n        for i, aname in enumerate(authors):\n            if name.lower().startswith(aname.lower()):\n                return i\n        # if not found put at end\n        return len(authors) + 1\n\n    def getAuthors(self) -&gt; typing.List[Scholar]:\n        \"\"\"\n        get my authors\n\n        Returns:\n            list: a list of Scholars\n        \"\"\"\n        m_dict = self.getMergedDict()\n        author_names = m_dict[\"cvb.authors\"].split(\",\")\n        if \"dblp.authors\" in m_dict:\n            authors = []\n            dblp_author_records = m_dict[\"dblp.authors\"]\n            for dblp_author_record in dblp_author_records:\n                author = DataClassUtil.dataclass_from_dict(Scholar, dblp_author_record)\n                authors.append(author)\n                author.index = self.getAuthorIndex(author.label, author_names)\n                if author.index &lt; len(author_names):\n                    author.name = author_names[author.index]\n                else:\n                    author.name = author.label\n            sorted_authors = sorted(authors, key=lambda author: author.index)\n        else:\n            sorted_authors = []\n            for author_name in author_names:\n                scholar = Scholar(dblp_author_id=None, label=author_name)\n                scholar.name = author_name\n                sorted_authors.append(scholar)\n        return sorted_authors\n\n    def getAuthorBar(self):\n        \"\"\"\n        show the authors of this paper\n        \"\"\"\n        authors = self.getAuthors()\n        html = \"\"\n        for author in authors:\n            icon_list = [\n                {\n                    \"src\": \"/static/icons/32px-dblp-icon.png\",\n                    \"title\": \"dblp\",\n                    \"link\": f\"{author.dblp_author_id}\",\n                    \"valid\": author.dblp_author_id,\n                },\n                {\n                    \"src\": \"/static/icons/32px-ORCID-icon.png\",\n                    \"title\": \"ORCID\",\n                    \"link\": f\"https://orcid.org/{author.orcid_id}\",\n                    \"valid\": author.orcid_id,\n                },\n                {\n                    \"src\": \"/static/icons/32px-DNB.svg.png\",\n                    \"title\": \"DNB\",\n                    \"link\": f\"https://d-nb.info/gnd/{author.gnd_id}\",\n                    \"valid\": author.gnd_id,\n                },\n                {\n                    \"src\": \"/static/icons/32px-Scholia_logo.svg.png\",\n                    \"title\": \"Author@scholia\",\n                    \"link\": f\"https://scholia.toolforge.org/author/{author.wikidata_id}\",\n                    \"valid\": author.wikidata_id,\n                },\n                {\n                    \"src\": \"/static/icons/32px-Wikidata_Query_Service_Favicon_wbg.svg.png\",\n                    \"title\": \"Author@wikidata\",\n                    \"link\": f\"https://www.wikidata.org/wiki/{author.wikidata_id}\",\n                    \"valid\": author.wikidata_id,\n                },\n            ]\n            soup = BeautifulSoup(\"&lt;html&gt;&lt;/html&gt;\", \"html.parser\")\n            link_tags = Volume.create_icon_list(soup, icon_list)\n            red = (\n                not author.wikidata_id\n                and not author.dblp_author_id\n                and not author.gnd_id\n                and not author.orcid_id\n            )\n            style = \"color:red\" if red else \"\"\n            html += f\"\"\"&lt;span style=\"{style}\"&gt;{author.label}\"\"\"\n            for link_tag in link_tags:\n                html += str(link_tag)\n            html += \"&lt;/span&gt;\"\n            pass\n        return html\n\n    def paperLinkParts(self: int, inc: int = 0):\n        \"\"\"\n        a relative paper link\n        \"\"\"\n        if inc &gt; 0:\n            presymbol = \"\u2af8\"\n            postsymbol = \"\"\n            paper = self.next()\n        elif inc &lt; 0:\n            presymbol = \"\"\n            postsymbol = \"\u2af7\"\n            paper = self.prev()\n        else:\n            presymbol = \"\"\n            postsymbol = \"\"\n            paper = self\n        href = None\n        text = None\n        if paper:\n            href = f\"/{paper.id}.html\"\n            text = f\"{presymbol}{paper.id}{postsymbol}\"\n        return href, text\n\n    def paperScrollLinks(self) -&gt; str:\n        \"\"\"\n        get the paper scroll links\n        \"\"\"\n        scroll_links = \"\"\n        for inc in [-1, 0, 1]:\n            href, text = self.paperLinkParts(inc)\n            if href:\n                scroll_links += f\"\"\"&lt;a href=\"{href}\"&gt;{text}&lt;/a&gt;\"\"\"\n        return scroll_links\n\n    def prev(self) -&gt; \"Paper\":\n        \"\"\"\n        get the previous paper in this volume\n        \"\"\"\n        return self.next(-1)\n\n    def next(self, inc: int = 1) -&gt; \"Paper\":\n        \"\"\"\n        get the next paper in this volume with the given increment\n\n        Args:\n            inc(int): the increment +1 = next, -1 = prev\n        \"\"\"\n        vol = self.volume\n        paper = None\n        if vol:\n            next_index = self.paper_index + inc\n            if next_index &gt;= 0 and next_index &lt; len(vol.papers):\n                paper = vol.papers[next_index]\n        return paper\n\n    def getIconBar(self, soup):\n        \"\"\"\n        get my icon bar\n\n        Parameters:\n            soup: The BeautifulSoup object to use for creating new tags.\n        \"\"\"\n        pdf_name = self.pdfUrl.replace(\"https://ceur-ws.org/\", \"\")\n        pdf_name = pdf_name.replace(\".pdf\", \"\")\n        # create a list of icons to add to the div\n        icon_list = [\n            {\n                \"src\": \"/static/icons/32px-text-icon.png\",\n                \"title\": \"plain text\",\n                \"link\": f\"/{pdf_name}.txt\",\n                \"valid\": self.getContentPathByPostfix(\".txt\"),\n            },\n            {\n                \"src\": \"/static/icons/32px-PDF_icon.svg.png\",\n                \"title\": \"original pdf\",\n                \"link\": f\"/{pdf_name}.pdf\",\n                \"valid\": self.getContentPathByPostfix(\".pdf\"),\n            },\n            {\n                \"src\": \"/static/icons/32px-Cermine-Icon.png\",\n                \"title\": \"Cermine metadata\",\n                \"link\": f\"/{pdf_name}.cermine\",\n                \"valid\": self.getContentPathByPostfix(\".cermine\"),\n            },\n            {\n                \"src\": \"/static/icons/32px-GROBID-icon.png\",\n                \"title\": \"GROBID metadata\",\n                \"link\": f\"/{pdf_name}.grobid\",\n                \"valid\": self.getContentPathByPostfix(\".grobid\"),\n            },\n            {\n                \"src\": \"/static/icons/32px-QuickStatements-icon.png\",\n                \"title\": \"Quickstatements\",\n                \"link\": f\"/{pdf_name}.qs\",\n                \"valid\": True,  # @TODO - add check for existing wikidata entry\n            },\n            {\n                \"src\": \"/static/icons/32px-SMW-icon.png\",\n                \"title\": \"SMW markup\",\n                \"link\": f\"/{pdf_name}.smw\",\n                \"valid\": True,\n            },\n            {\n                \"src\": \"/static/icons/32px-wbjson-icon.png\",\n                \"title\": \"wikibase CLI JSON metadata\",\n                \"link\": f\"/{pdf_name}.wbjson\",\n                \"valid\": True,\n            },\n            {\n                \"src\": \"/static/icons/32px-Wikibase_logo.svg.png\",\n                \"title\": \"wikibase CLI\",\n                \"link\": f\"/{pdf_name}.wbcli\",\n                \"valid\": True,\n            },\n            {\n                \"src\": \"/static/icons/32px-JSON_vector_logo.svg.png\",\n                \"title\": \"JSON metadata\",\n                \"link\": f\"/{pdf_name}.json\",\n                \"valid\": True,\n            },\n            {\n                \"src\": \"/static/icons/32px-YAML_Logo.svg.png\",\n                \"title\": \"YAML metadata\",\n                \"link\": f\"/{pdf_name}.yaml\",\n                \"valid\": True,\n            },\n        ]\n        icon_tag = Volume.create_icon_bar(soup, icon_list=icon_list)\n        return icon_tag\n\n    def asHtml(self):\n        \"\"\"\n        return an html response for this paper\n        \"\"\"\n        soup = BeautifulSoup(\"&lt;html&gt;&lt;/html&gt;\", \"html.parser\")\n        icon_bar = self.getIconBar(soup)\n        author_bar = self.getAuthorBar()\n        content = f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-type\" content=\"text/html;charset=utf-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/ceur-ws.css\"&gt;\n&lt;title&gt;{self.id} - {self.title}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table style=\"border: 0; border-spacing: 0; border-collapse: collapse; width: 95%\"&gt;\n&lt;tbody&gt;&lt;tr&gt;\n&lt;td style=\"text-align: left; vertical-align: middle\"&gt;\n&lt;a href=\"http://ceur-ws.org/\"&gt;&lt;div id=\"CEURWSLOGO\"&gt;&lt;/div&gt;&lt;/a&gt;\n&lt;/td&gt;\n&lt;td style=\"text-align: right; vertical-align: middle\"&gt;\n&lt;div style=\"float:left\" id=\"CEURCCBY\"&gt;&lt;/div&gt;\n{Volume.volLink(self.volume.number,-1)}\n&lt;span class=\"CEURVOLNR\"&gt;{Volume.volLink(self.volume.number)}&lt;/span&gt;\n{Volume.volLink(self.volume.number,+1)}&lt;br&gt;\n&lt;span class=\"CEURURN\"&gt;urn:nbn:de:0074-{self.volume.number}-0&lt;/span&gt;\n&lt;p class=\"unobtrusive copyright\" style=\"text-align: justify\"&gt;Copyright &amp;copy; {self.volume.date[:4]} for\nthe individual papers by the papers' authors. \nCopyright &amp;copy; &lt;span class=\"CEURPUBYEAR\"&gt;{self.volume.date[:4]}&lt;/span&gt; for the volume\nas a collection by its editors.\nThis volume and its papers are published under the\nCreative Commons License Attribution 4.0 International\n&lt;A HREF=\"https://creativecommons.org/licenses/by/4.0/\"&gt;(&lt;span class=\"CEURLIC\"&gt;CC BY 4.0&lt;/span&gt;)&lt;/A&gt;.&lt;/p&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n{str(icon_bar)}\n&lt;hr/&gt;\n{self.paperScrollLinks()}\n&lt;hr/&gt;\n{str(author_bar)}\n&lt;hr/&gt;\n&lt;h1&gt;{self.title}&lt;h1&gt;\n&lt;embed src=\"{self.pdfUrl}\" style=\"width:100vw;height:100vh\" type=\"application/pdf\"&gt;\n&lt;body&gt;\n&lt;/body&gt;\n        \"\"\"\n        return content\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.asHtml","title":"<code>asHtml()</code>","text":"<p>return an html response for this paper</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>    def asHtml(self):\n        \"\"\"\n        return an html response for this paper\n        \"\"\"\n        soup = BeautifulSoup(\"&lt;html&gt;&lt;/html&gt;\", \"html.parser\")\n        icon_bar = self.getIconBar(soup)\n        author_bar = self.getAuthorBar()\n        content = f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-type\" content=\"text/html;charset=utf-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/ceur-ws.css\"&gt;\n&lt;title&gt;{self.id} - {self.title}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table style=\"border: 0; border-spacing: 0; border-collapse: collapse; width: 95%\"&gt;\n&lt;tbody&gt;&lt;tr&gt;\n&lt;td style=\"text-align: left; vertical-align: middle\"&gt;\n&lt;a href=\"http://ceur-ws.org/\"&gt;&lt;div id=\"CEURWSLOGO\"&gt;&lt;/div&gt;&lt;/a&gt;\n&lt;/td&gt;\n&lt;td style=\"text-align: right; vertical-align: middle\"&gt;\n&lt;div style=\"float:left\" id=\"CEURCCBY\"&gt;&lt;/div&gt;\n{Volume.volLink(self.volume.number,-1)}\n&lt;span class=\"CEURVOLNR\"&gt;{Volume.volLink(self.volume.number)}&lt;/span&gt;\n{Volume.volLink(self.volume.number,+1)}&lt;br&gt;\n&lt;span class=\"CEURURN\"&gt;urn:nbn:de:0074-{self.volume.number}-0&lt;/span&gt;\n&lt;p class=\"unobtrusive copyright\" style=\"text-align: justify\"&gt;Copyright &amp;copy; {self.volume.date[:4]} for\nthe individual papers by the papers' authors. \nCopyright &amp;copy; &lt;span class=\"CEURPUBYEAR\"&gt;{self.volume.date[:4]}&lt;/span&gt; for the volume\nas a collection by its editors.\nThis volume and its papers are published under the\nCreative Commons License Attribution 4.0 International\n&lt;A HREF=\"https://creativecommons.org/licenses/by/4.0/\"&gt;(&lt;span class=\"CEURLIC\"&gt;CC BY 4.0&lt;/span&gt;)&lt;/A&gt;.&lt;/p&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n{str(icon_bar)}\n&lt;hr/&gt;\n{self.paperScrollLinks()}\n&lt;hr/&gt;\n{str(author_bar)}\n&lt;hr/&gt;\n&lt;h1&gt;{self.title}&lt;h1&gt;\n&lt;embed src=\"{self.pdfUrl}\" style=\"width:100vw;height:100vh\" type=\"application/pdf\"&gt;\n&lt;body&gt;\n&lt;/body&gt;\n        \"\"\"\n        return content\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.as_quickstatements","title":"<code>as_quickstatements()</code>","text":"<p>return my quickstatements</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>    def as_quickstatements(self) -&gt; str:\n        \"\"\"\n        return my quickstatements\n        \"\"\"\n        m_dict = self.getMergedDict()\n        paper_date_str = self.volume.date\n        paper_date = datetime.strptime(paper_date_str, \"%Y-%m-%d\")\n        qs_date = f\"+{paper_date.isoformat(sep='T',timespec='auto')}Z/11\"\n        qs = f\"\"\"# created by {__file__}\nCREATE\n# P31  :instance of  Q13442814:scholarly article\nLAST|P31|Q13442814\n# P1433: published in \nLAST|P1433|{self.volume.wikidataid}\n# english label\nLAST|Len|\"{self.title}\"\n# english description\nLAST|Den|\"scientific paper published in CEUR-WS Volume {self.volume.number}\"\n# P1476:title\nLAST|P1476|en:\"{self.title}\"\n# P407 :language of work or name  Q1860:English\nLAST|P407|Q1860\n# P953 :full work available at URL\nLAST|P953|\"{self.pdfUrl}\"\n# P577 :publication date\nLAST|P577|{qs_date}\n\"\"\"\n        # @TODO pages ...\n        authors = self.getAuthors()\n        for index, author in enumerate(authors):\n            if not author.wikidata_id:\n                qs += f\"\"\"# P2093: author name string, P1545: series ordinal\nLAST|P2093|\"{author.name}\"|P1545|\"{index+1}\"\n\"\"\"\n            else:\n                qs += f\"\"\"# P50: author, P1545: series ordinal\nLAST|P50|{author.wikidata_id}|P1545|\"{index+1}\"       \n\"\"\"\n            pass\n        return qs\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.as_smw_markup","title":"<code>as_smw_markup()</code>","text":"<p>return my semantic mediawiki markup</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the smw markup for this paper</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>    def as_smw_markup(self) -&gt; str:\n        \"\"\"\n        return my semantic mediawiki markup\n\n        Returns:\n            str: the smw markup for this paper\n        \"\"\"\n        m_dict = self.getMergedDict()\n        self.authors = m_dict[\"cvb.authors\"]\n        if \"dblp.dblp_publication_id\" in m_dict:\n            self.dblpUrl = m_dict[\"dblp.dblp_publication_id\"]\n        markup = f\"\"\"=Paper=\n{{{{Paper\n|id={self.id}\n|storemode=property\n|title={self.title}\n|pdfUrl={self.pdfUrl}\n|volume=Vol-{self.volume.number}\n\"\"\"\n        for attr in [\"authors\", \"wikidataid\", \"dblpUrl\"]:\n            if hasattr(self, attr):\n                value = getattr(self, attr)\n                if value:\n                    markup += f\"|{attr}={value}\\n\"\n        markup += f\"\"\"}}}}\n=={self.title}==\n&lt;pdf width=\"1500px\"&gt;{self.pdfUrl}&lt;/pdf&gt;\n&lt;pre&gt;\n{self.getText()}\n&lt;/pre&gt;\n        \"\"\"\n        return markup\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.as_wb_dict","title":"<code>as_wb_dict()</code>","text":"<p>wb create-entity '{\"labels\":{\"en\":\"a label\",\"fr\":\"un label\"},\"descriptions\":{\"en\":\"some description\",\"fr\":\"une description\"},\"claims\":{\"P1775\":[\"Q3576110\",\"Q12206942\"],\"P2002\":\"bulgroz\"}}'</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def as_wb_dict(self) -&gt; dict:\n    \"\"\"\n    wb create-entity '{\"labels\":{\"en\":\"a label\",\"fr\":\"un label\"},\"descriptions\":{\"en\":\"some description\",\"fr\":\"une description\"},\"claims\":{\"P1775\":[\"Q3576110\",\"Q12206942\"],\"P2002\":\"bulgroz\"}}'\n    \"\"\"\n    wb = {\n        \"labels\": {\"en\": self.title},\n        \"descriptions\": {\n            \"en\": f\"scientific paper published in CEUR-WS Volume {self.volume.number}\"\n        },\n        \"claims\": {\n            # P31  :instance of  Q13442814:scholarly article\n            \"P31\": \"Q13442814\",\n            #  P1433: published in\n            \"P1433\": self.volume.wikidataid,\n            # P1476:title\n            \"P1476\": {\"text\": self.title, \"language\": \"en\"},\n            # P407 :language of work or name  Q1860:English\n            \"P407\": \"Q1860\",\n            #  P953 :full work available at URL\n            \"P953\": self.pdfUrl,\n            # P50: author, P1545: series ordinal\n            \"P50\": [],\n            # P2093: author name string, P1545: series ordinal\n            \"P2093\": [],\n        },\n    }\n    author_claims = wb[\"claims\"][\"P50\"]\n    author_name_claims = wb[\"claims\"][\"P2093\"]\n    authors = self.getAuthors()\n    for index, author in enumerate(authors):\n        if not author.wikidata_id:\n            author_name_claims.append(\n                {\"value\": author.name, \"qualifiers\": {\"P1545\": f\"{index+1}\"}}\n            )\n        else:\n            author_claims.append(\n                {\"value\": author.wikidata_id, \"qualifiers\": {\"P1545\": f\"{index+1}\"}}\n            )\n    return wb\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.as_wbi_cli_text","title":"<code>as_wbi_cli_text(qid)</code>","text":"<p>Generates a series of Wikibase CLI command strings to add claims to the entity represented by this paper, based on the provided QID.</p> <p>Parameters:</p> Name Type Description Default <code>qid</code> <code>str</code> <p>The QID of the Wikibase item to which the claims will be added.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string containing all the 'wb add-claim' commands separated by newlines.</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def as_wbi_cli_text(self, qid: str) -&gt; str:\n    \"\"\"\n    Generates a series of Wikibase CLI command strings to add claims to the entity\n    represented by this paper, based on the provided QID.\n\n    Args:\n        qid (str): The QID of the Wikibase item to which the claims will be added.\n\n    Returns:\n        str: A string containing all the 'wb add-claim' commands separated by newlines.\n    \"\"\"\n    # Get the dictionary representation of the paper\n    wb_dict = self.as_wb_dict()\n\n    # Initialize an empty list to hold all commands\n    cli_commands = []\n\n    # Iterate through each claim to create a separate wb add-claim command\n    for prop, value in wb_dict[\"claims\"].items():\n        # Handle different structures in claims (e.g., simple vs. complex with qualifiers)\n        if isinstance(\n            value, list\n        ):  # Expecting a list of values (or complex value structures)\n            for val in value:\n                # Convert value to a JSON string and escape quotes for command line\n                val_json = json.dumps(val).replace('\"', '\\\\\"')\n                cli_commands.append(f'wb add-claim {qid} {prop} \"{val_json}\"')\n        else:  # A single value or simple structure\n            # Convert value to a JSON string and escape quotes for command line\n            value_json = json.dumps(value).replace('\"', '\\\\\"')\n            cli_commands.append(f'wb add-claim {qid} {prop} \"{value_json}\"')\n\n    # Combine all commands into a single string separated by newlines\n    cli = \"\\n\".join(cli_commands)\n    return cli\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.getAuthorBar","title":"<code>getAuthorBar()</code>","text":"<p>show the authors of this paper</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getAuthorBar(self):\n    \"\"\"\n    show the authors of this paper\n    \"\"\"\n    authors = self.getAuthors()\n    html = \"\"\n    for author in authors:\n        icon_list = [\n            {\n                \"src\": \"/static/icons/32px-dblp-icon.png\",\n                \"title\": \"dblp\",\n                \"link\": f\"{author.dblp_author_id}\",\n                \"valid\": author.dblp_author_id,\n            },\n            {\n                \"src\": \"/static/icons/32px-ORCID-icon.png\",\n                \"title\": \"ORCID\",\n                \"link\": f\"https://orcid.org/{author.orcid_id}\",\n                \"valid\": author.orcid_id,\n            },\n            {\n                \"src\": \"/static/icons/32px-DNB.svg.png\",\n                \"title\": \"DNB\",\n                \"link\": f\"https://d-nb.info/gnd/{author.gnd_id}\",\n                \"valid\": author.gnd_id,\n            },\n            {\n                \"src\": \"/static/icons/32px-Scholia_logo.svg.png\",\n                \"title\": \"Author@scholia\",\n                \"link\": f\"https://scholia.toolforge.org/author/{author.wikidata_id}\",\n                \"valid\": author.wikidata_id,\n            },\n            {\n                \"src\": \"/static/icons/32px-Wikidata_Query_Service_Favicon_wbg.svg.png\",\n                \"title\": \"Author@wikidata\",\n                \"link\": f\"https://www.wikidata.org/wiki/{author.wikidata_id}\",\n                \"valid\": author.wikidata_id,\n            },\n        ]\n        soup = BeautifulSoup(\"&lt;html&gt;&lt;/html&gt;\", \"html.parser\")\n        link_tags = Volume.create_icon_list(soup, icon_list)\n        red = (\n            not author.wikidata_id\n            and not author.dblp_author_id\n            and not author.gnd_id\n            and not author.orcid_id\n        )\n        style = \"color:red\" if red else \"\"\n        html += f\"\"\"&lt;span style=\"{style}\"&gt;{author.label}\"\"\"\n        for link_tag in link_tags:\n            html += str(link_tag)\n        html += \"&lt;/span&gt;\"\n        pass\n    return html\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.getAuthorIndex","title":"<code>getAuthorIndex(name, authors)</code>","text":"<p>get the author index</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getAuthorIndex(self, name: str, authors: typing.List[str]):\n    \"\"\"\n    get the author index\n    \"\"\"\n    for i, aname in enumerate(authors):\n        if name.lower().startswith(aname.lower()):\n            return i\n    # if not found put at end\n    return len(authors) + 1\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.getAuthors","title":"<code>getAuthors()</code>","text":"<p>get my authors</p> <p>Returns:</p> Name Type Description <code>list</code> <code>List[Scholar]</code> <p>a list of Scholars</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getAuthors(self) -&gt; typing.List[Scholar]:\n    \"\"\"\n    get my authors\n\n    Returns:\n        list: a list of Scholars\n    \"\"\"\n    m_dict = self.getMergedDict()\n    author_names = m_dict[\"cvb.authors\"].split(\",\")\n    if \"dblp.authors\" in m_dict:\n        authors = []\n        dblp_author_records = m_dict[\"dblp.authors\"]\n        for dblp_author_record in dblp_author_records:\n            author = DataClassUtil.dataclass_from_dict(Scholar, dblp_author_record)\n            authors.append(author)\n            author.index = self.getAuthorIndex(author.label, author_names)\n            if author.index &lt; len(author_names):\n                author.name = author_names[author.index]\n            else:\n                author.name = author.label\n        sorted_authors = sorted(authors, key=lambda author: author.index)\n    else:\n        sorted_authors = []\n        for author_name in author_names:\n            scholar = Scholar(dblp_author_id=None, label=author_name)\n            scholar.name = author_name\n            sorted_authors.append(scholar)\n    return sorted_authors\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.getBasePath","title":"<code>getBasePath()</code>","text":"<p>get the base path to my files</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getBasePath(self) -&gt; Optional[str]:\n    \"\"\"\n    get the base path to my files\n    \"\"\"\n    if self.pdfUrl:\n        base_path = self.pdfUrl.replace(\"https://ceur-ws.org/\", \"\")\n        base_path = base_path.replace(\".pdf\", \"\")\n        base_path = f\"{self.volume.vm.base_path}/{base_path}\"\n        if os.path.isfile(f\"{base_path}.pdf\"):\n            return base_path\n    return None\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.getContentByPostfix","title":"<code>getContentByPostfix(postfix)</code>","text":"<p>get the content for the given postfix</p> <p>Parameters:</p> Name Type Description Default <code>postfix(str)</code> <p>the postfix to read</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the context</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getContentByPostfix(self, postfix: str) -&gt; str:\n    \"\"\"\n    get the content for the given postfix\n\n    Args:\n        postfix(str): the postfix to read\n\n    Returns:\n        str: the context\n    \"\"\"\n    text_path = self.getContentPathByPostfix(postfix)\n    content = None\n    if text_path:\n        with open(text_path, \"r\") as text_file:\n            content = text_file.read()\n    return content\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.getContentPathByPostfix","title":"<code>getContentPathByPostfix(postfix)</code>","text":"<p>get the content path for the given postfix</p> <p>Parameters:</p> Name Type Description Default <code>postfix(str)</code> <p>the postfix to read</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>the context path</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getContentPathByPostfix(self, postfix: str):\n    \"\"\"\n    get the content path for the given postfix\n\n    Args:\n        postfix(str): the postfix to read\n\n    Returns:\n        str: the context path\n    \"\"\"\n    base_path = self.getBasePath()\n    if base_path is None:\n        return None\n    text_path = f\"{base_path}{postfix}\"\n    if os.path.isfile(text_path):\n        return text_path\n    else:\n        return None\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.getIconBar","title":"<code>getIconBar(soup)</code>","text":"<p>get my icon bar</p> <p>Parameters:</p> Name Type Description Default <code>soup</code> <p>The BeautifulSoup object to use for creating new tags.</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getIconBar(self, soup):\n    \"\"\"\n    get my icon bar\n\n    Parameters:\n        soup: The BeautifulSoup object to use for creating new tags.\n    \"\"\"\n    pdf_name = self.pdfUrl.replace(\"https://ceur-ws.org/\", \"\")\n    pdf_name = pdf_name.replace(\".pdf\", \"\")\n    # create a list of icons to add to the div\n    icon_list = [\n        {\n            \"src\": \"/static/icons/32px-text-icon.png\",\n            \"title\": \"plain text\",\n            \"link\": f\"/{pdf_name}.txt\",\n            \"valid\": self.getContentPathByPostfix(\".txt\"),\n        },\n        {\n            \"src\": \"/static/icons/32px-PDF_icon.svg.png\",\n            \"title\": \"original pdf\",\n            \"link\": f\"/{pdf_name}.pdf\",\n            \"valid\": self.getContentPathByPostfix(\".pdf\"),\n        },\n        {\n            \"src\": \"/static/icons/32px-Cermine-Icon.png\",\n            \"title\": \"Cermine metadata\",\n            \"link\": f\"/{pdf_name}.cermine\",\n            \"valid\": self.getContentPathByPostfix(\".cermine\"),\n        },\n        {\n            \"src\": \"/static/icons/32px-GROBID-icon.png\",\n            \"title\": \"GROBID metadata\",\n            \"link\": f\"/{pdf_name}.grobid\",\n            \"valid\": self.getContentPathByPostfix(\".grobid\"),\n        },\n        {\n            \"src\": \"/static/icons/32px-QuickStatements-icon.png\",\n            \"title\": \"Quickstatements\",\n            \"link\": f\"/{pdf_name}.qs\",\n            \"valid\": True,  # @TODO - add check for existing wikidata entry\n        },\n        {\n            \"src\": \"/static/icons/32px-SMW-icon.png\",\n            \"title\": \"SMW markup\",\n            \"link\": f\"/{pdf_name}.smw\",\n            \"valid\": True,\n        },\n        {\n            \"src\": \"/static/icons/32px-wbjson-icon.png\",\n            \"title\": \"wikibase CLI JSON metadata\",\n            \"link\": f\"/{pdf_name}.wbjson\",\n            \"valid\": True,\n        },\n        {\n            \"src\": \"/static/icons/32px-Wikibase_logo.svg.png\",\n            \"title\": \"wikibase CLI\",\n            \"link\": f\"/{pdf_name}.wbcli\",\n            \"valid\": True,\n        },\n        {\n            \"src\": \"/static/icons/32px-JSON_vector_logo.svg.png\",\n            \"title\": \"JSON metadata\",\n            \"link\": f\"/{pdf_name}.json\",\n            \"valid\": True,\n        },\n        {\n            \"src\": \"/static/icons/32px-YAML_Logo.svg.png\",\n            \"title\": \"YAML metadata\",\n            \"link\": f\"/{pdf_name}.yaml\",\n            \"valid\": True,\n        },\n    ]\n    icon_tag = Volume.create_icon_bar(soup, icon_list=icon_list)\n    return icon_tag\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.getMergedDict","title":"<code>getMergedDict()</code>","text":"<p>get the merged dict for this paper</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getMergedDict(self) -&gt; dict:\n    \"\"\"\n    get the merged dict for this paper\n    \"\"\"\n    my_dict = dataclasses.asdict(self)\n    m_dict = {\n        \"version.version\": Version.version,\n        \"version.cm_url\": Version.cm_url,\n        \"spt.html_url\": f\"/{self.id}.html\",\n    }\n    for key, value in my_dict.items():\n        m_dict[f\"spt.{key}\"] = value\n    pdf_name = self.pdfUrl.replace(\"https://ceur-ws.org/\", \"\")\n    if pdf_name in self.pm.paper_records_by_path:\n        pdf_record = self.pm.paper_records_by_path[pdf_name]\n        for key, value in pdf_record.items():\n            m_dict[f\"cvb.{key}\"] = value\n    if pdf_name in self.pm.paper_dblp_by_path:\n        dblp_record = self.pm.paper_dblp_by_path[pdf_name]\n        for key, value in dblp_record.items():\n            m_dict[f\"dblp.{key}\"] = value\n    return m_dict\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.getPdf","title":"<code>getPdf()</code>","text":"<p>get the PDF file for this paper</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getPdf(self):\n    \"\"\"\n    get the PDF file for this paper\n    \"\"\"\n    base_path = self.getBasePath()\n    pdf = f\"{base_path}.pdf\"\n    return pdf\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.getText","title":"<code>getText()</code>","text":"<p>get the plain text content of this paper</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getText(self) -&gt; str:\n    \"\"\"\n    get the plain text content of this paper\n    \"\"\"\n    text = self.getContentByPostfix(\"-content.txt\")\n    return text\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.next","title":"<code>next(inc=1)</code>","text":"<p>get the next paper in this volume with the given increment</p> <p>Parameters:</p> Name Type Description Default <code>inc(int)</code> <p>the increment +1 = next, -1 = prev</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def next(self, inc: int = 1) -&gt; \"Paper\":\n    \"\"\"\n    get the next paper in this volume with the given increment\n\n    Args:\n        inc(int): the increment +1 = next, -1 = prev\n    \"\"\"\n    vol = self.volume\n    paper = None\n    if vol:\n        next_index = self.paper_index + inc\n        if next_index &gt;= 0 and next_index &lt; len(vol.papers):\n            paper = vol.papers[next_index]\n    return paper\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.paperLinkParts","title":"<code>paperLinkParts(inc=0)</code>","text":"<p>a relative paper link</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def paperLinkParts(self: int, inc: int = 0):\n    \"\"\"\n    a relative paper link\n    \"\"\"\n    if inc &gt; 0:\n        presymbol = \"\u2af8\"\n        postsymbol = \"\"\n        paper = self.next()\n    elif inc &lt; 0:\n        presymbol = \"\"\n        postsymbol = \"\u2af7\"\n        paper = self.prev()\n    else:\n        presymbol = \"\"\n        postsymbol = \"\"\n        paper = self\n    href = None\n    text = None\n    if paper:\n        href = f\"/{paper.id}.html\"\n        text = f\"{presymbol}{paper.id}{postsymbol}\"\n    return href, text\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.paperScrollLinks","title":"<code>paperScrollLinks()</code>","text":"<p>get the paper scroll links</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def paperScrollLinks(self) -&gt; str:\n    \"\"\"\n    get the paper scroll links\n    \"\"\"\n    scroll_links = \"\"\n    for inc in [-1, 0, 1]:\n        href, text = self.paperLinkParts(inc)\n        if href:\n            scroll_links += f\"\"\"&lt;a href=\"{href}\"&gt;{text}&lt;/a&gt;\"\"\"\n    return scroll_links\n</code></pre>"},{"location":"#ceurspt.ceurws.Paper.prev","title":"<code>prev()</code>","text":"<p>get the previous paper in this volume</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def prev(self) -&gt; \"Paper\":\n    \"\"\"\n    get the previous paper in this volume\n    \"\"\"\n    return self.next(-1)\n</code></pre>"},{"location":"#ceurspt.ceurws.PaperManager","title":"<code>PaperManager</code>","text":"<p>               Bases: <code>JsonCacheManager</code></p> <p>manage all papers</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>class PaperManager(JsonCacheManager):\n    \"\"\"\n    manage all papers\n    \"\"\"\n\n    def __init__(self, base_url: str):\n        \"\"\"\n        constructor\n\n        Args:\n            base_url(str): the url of the RESTFul metadata service\n        \"\"\"\n        JsonCacheManager.__init__(self, base_url)\n        self.papers_by_id: Dict[str, Paper] = {}\n        self.papers_by_path: Dict[str, Paper] = {}\n        self.paper_records_by_path: Dict[str, dict] = {}\n        self.paper_dblp_by_path: Dict[str, dict] = {}\n\n    def getPaper(self, number: int, pdf_name: str):\n        \"\"\"\n        get the paper with the given number and pdf name\n\n        Args:\n            number(int): the number of the volume the paper is part of\n            pdf_name(str): the pdf name of the paper\n\n        Returns:\n            Paper: the paper or None if the paper is not found\n        \"\"\"\n        pdf_path = f\"Vol-{number}/{pdf_name}.pdf\"\n        paper = None\n        if pdf_path in self.papers_by_path:\n            paper = self.papers_by_path[pdf_path]\n            paper.pm = self\n        return paper\n\n    def get_volume_papers(self, number: int) -&gt; List[Paper]:\n        \"\"\"\n        Get all papers of given volume number\n        Args:\n            number(int): the number of the volume the papers are part of\n        Returns:\n            list of papers\n        \"\"\"\n        volume_papers = [\n            paper\n            for pdf_path, paper in self.papers_by_path.items()\n            if pdf_path.startswith(f\"Vol-{number}/\")\n        ]\n        return volume_papers\n\n    def getPapers(self, vm: VolumeManager, verbose: bool = False):\n        \"\"\"\n        get all papers\n\n        Args:\n            vm: VolumeManager\n            verbose(bool): if True show verbose loading information\n        \"\"\"\n        profiler = Profiler(\"Loading papers ...\", profile=verbose)\n        paper_lod = self.load_lod(\"papers\")\n        msg = f\"{len(paper_lod)} papers\"\n        profiler.time(msg)\n        profiler = Profiler(\"Loading dblp paper metadata ...\", profile=verbose)\n        paper_dblp_lod = self.load_lod(\"papers_dblp\")\n        msg = f\"{len(paper_dblp_lod)} dblp indexed papers\"\n        profiler.time(msg)\n        profiler = Profiler(\"Linking papers and volumes...\", profile=verbose)\n        self.papers_by_id = {}\n        self.paper_records_by_path = {}\n        self.papers_by_path = {}\n        for _index, paper_record in enumerate(paper_lod):\n            pdf_name = paper_record[\"pdf_name\"]\n            volume_number = paper_record[\"vol_number\"]\n            volume = vm.getVolume(volume_number)\n            # pdf_url=f\"https://ceur-ws.org/Vol-{volume_number}/{pdf_name}\"\n            pdf_path = f\"Vol-{volume_number}/{pdf_name}\"\n            pdf_url = f\"https://ceur-ws.org/{pdf_path}\"\n            try:\n                paper = Paper(\n                    id=paper_record[\"id\"],\n                    title=paper_record[\"title\"],\n                    # authors=paper_record[\"authors\"],\n                    pdfUrl=pdf_url,\n                    volume=volume,\n                )\n                paper.pm = self\n                if volume:\n                    volume.addPaper(paper)\n                self.papers_by_id[paper_record[\"id\"]] = paper\n                self.papers_by_path[pdf_path] = paper\n                self.paper_records_by_path[pdf_path] = paper_record\n            except Exception as ex:\n                print(\n                    f\"handling of Paper for pdfUrl '{pdf_url}' failed with {str(ex)}\",\n                    flush=True,\n                )\n        self.paper_dblp_by_path = {}\n        for _index, dblp_record in enumerate(paper_dblp_lod):\n            pdf_id = dblp_record[\"pdf_id\"]\n            self.paper_dblp_by_path[f\"{pdf_id}.pdf\"] = dblp_record\n        msg = f\"{len(self.papers_by_path)} papers linked to volumes\"\n        profiler.time(msg)\n</code></pre>"},{"location":"#ceurspt.ceurws.PaperManager.__init__","title":"<code>__init__(base_url)</code>","text":"<p>constructor</p> <p>Parameters:</p> Name Type Description Default <code>base_url(str)</code> <p>the url of the RESTFul metadata service</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def __init__(self, base_url: str):\n    \"\"\"\n    constructor\n\n    Args:\n        base_url(str): the url of the RESTFul metadata service\n    \"\"\"\n    JsonCacheManager.__init__(self, base_url)\n    self.papers_by_id: Dict[str, Paper] = {}\n    self.papers_by_path: Dict[str, Paper] = {}\n    self.paper_records_by_path: Dict[str, dict] = {}\n    self.paper_dblp_by_path: Dict[str, dict] = {}\n</code></pre>"},{"location":"#ceurspt.ceurws.PaperManager.getPaper","title":"<code>getPaper(number, pdf_name)</code>","text":"<p>get the paper with the given number and pdf name</p> <p>Parameters:</p> Name Type Description Default <code>number(int)</code> <p>the number of the volume the paper is part of</p> required <code>pdf_name(str)</code> <p>the pdf name of the paper</p> required <p>Returns:</p> Name Type Description <code>Paper</code> <p>the paper or None if the paper is not found</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getPaper(self, number: int, pdf_name: str):\n    \"\"\"\n    get the paper with the given number and pdf name\n\n    Args:\n        number(int): the number of the volume the paper is part of\n        pdf_name(str): the pdf name of the paper\n\n    Returns:\n        Paper: the paper or None if the paper is not found\n    \"\"\"\n    pdf_path = f\"Vol-{number}/{pdf_name}.pdf\"\n    paper = None\n    if pdf_path in self.papers_by_path:\n        paper = self.papers_by_path[pdf_path]\n        paper.pm = self\n    return paper\n</code></pre>"},{"location":"#ceurspt.ceurws.PaperManager.getPapers","title":"<code>getPapers(vm, verbose=False)</code>","text":"<p>get all papers</p> <p>Parameters:</p> Name Type Description Default <code>vm</code> <code>VolumeManager</code> <p>VolumeManager</p> required <code>verbose(bool)</code> <p>if True show verbose loading information</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getPapers(self, vm: VolumeManager, verbose: bool = False):\n    \"\"\"\n    get all papers\n\n    Args:\n        vm: VolumeManager\n        verbose(bool): if True show verbose loading information\n    \"\"\"\n    profiler = Profiler(\"Loading papers ...\", profile=verbose)\n    paper_lod = self.load_lod(\"papers\")\n    msg = f\"{len(paper_lod)} papers\"\n    profiler.time(msg)\n    profiler = Profiler(\"Loading dblp paper metadata ...\", profile=verbose)\n    paper_dblp_lod = self.load_lod(\"papers_dblp\")\n    msg = f\"{len(paper_dblp_lod)} dblp indexed papers\"\n    profiler.time(msg)\n    profiler = Profiler(\"Linking papers and volumes...\", profile=verbose)\n    self.papers_by_id = {}\n    self.paper_records_by_path = {}\n    self.papers_by_path = {}\n    for _index, paper_record in enumerate(paper_lod):\n        pdf_name = paper_record[\"pdf_name\"]\n        volume_number = paper_record[\"vol_number\"]\n        volume = vm.getVolume(volume_number)\n        # pdf_url=f\"https://ceur-ws.org/Vol-{volume_number}/{pdf_name}\"\n        pdf_path = f\"Vol-{volume_number}/{pdf_name}\"\n        pdf_url = f\"https://ceur-ws.org/{pdf_path}\"\n        try:\n            paper = Paper(\n                id=paper_record[\"id\"],\n                title=paper_record[\"title\"],\n                # authors=paper_record[\"authors\"],\n                pdfUrl=pdf_url,\n                volume=volume,\n            )\n            paper.pm = self\n            if volume:\n                volume.addPaper(paper)\n            self.papers_by_id[paper_record[\"id\"]] = paper\n            self.papers_by_path[pdf_path] = paper\n            self.paper_records_by_path[pdf_path] = paper_record\n        except Exception as ex:\n            print(\n                f\"handling of Paper for pdfUrl '{pdf_url}' failed with {str(ex)}\",\n                flush=True,\n            )\n    self.paper_dblp_by_path = {}\n    for _index, dblp_record in enumerate(paper_dblp_lod):\n        pdf_id = dblp_record[\"pdf_id\"]\n        self.paper_dblp_by_path[f\"{pdf_id}.pdf\"] = dblp_record\n    msg = f\"{len(self.papers_by_path)} papers linked to volumes\"\n    profiler.time(msg)\n</code></pre>"},{"location":"#ceurspt.ceurws.PaperManager.get_volume_papers","title":"<code>get_volume_papers(number)</code>","text":"<p>Get all papers of given volume number Args:     number(int): the number of the volume the papers are part of Returns:     list of papers</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def get_volume_papers(self, number: int) -&gt; List[Paper]:\n    \"\"\"\n    Get all papers of given volume number\n    Args:\n        number(int): the number of the volume the papers are part of\n    Returns:\n        list of papers\n    \"\"\"\n    volume_papers = [\n        paper\n        for pdf_path, paper in self.papers_by_path.items()\n        if pdf_path.startswith(f\"Vol-{number}/\")\n    ]\n    return volume_papers\n</code></pre>"},{"location":"#ceurspt.ceurws.Scholar","title":"<code>Scholar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DblpScholar</code></p> <p>a scholar</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>class Scholar(ceurspt.models.dblp.DblpScholar):\n    \"\"\"\n    a scholar\n    \"\"\"\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume","title":"<code>Volume</code>","text":"<p>               Bases: <code>Volume</code></p> <p>a CEUR-WS Volume with it's behavior</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>class Volume(ceurspt.ceurws_base.Volume):\n    \"\"\"\n    a CEUR-WS Volume with it's behavior\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        ceurspt.ceurws_base.Volume.__init__(self, **kwargs)\n        self.papers = []\n\n    def getMergedDict(self) -&gt; dict:\n        \"\"\"\n        get my merged dict\n\n        Returns:\n            dict\n        \"\"\"\n        my_dict = dataclasses.asdict(self)\n        m_dict = {\n            \"version.version\": Version.version,\n            \"version.cm_url\": Version.cm_url,\n            \"spt.html_url\": f\"/Vol-{self.number}.html\",\n        }\n        for key, value in my_dict.items():\n            m_dict[f\"spt.{key}\"] = value\n        volrecord = self.vm.getVolumeRecord(self.number)\n        for key, value in volrecord.items():\n            if \".\" in key:\n                m_dict[f\"{key}\"] = value\n            else:\n                m_dict[f\"cvb.{key}\"] = value\n        return m_dict\n\n    @classmethod\n    def volLinkParts(cls, number: int, inc: int = 0):\n        \"\"\"\n        a relative volume link\n        \"\"\"\n        if inc &gt; 0:\n            presymbol = \"\u2af8\"\n            postsymbol = \"\"\n        elif inc &lt; 0:\n            presymbol = \"\"\n            postsymbol = \"\u2af7\"\n        else:\n            presymbol = \"\"\n            postsymbol = \"\"\n        href = f\"/Vol-{number+inc}.html\"\n        text = f\"{presymbol}Vol-{number+inc}{postsymbol}\"\n        return href, text\n\n    @classmethod\n    def volLink(cls, number: int, inc: int = 0) -&gt; str:\n        \"\"\"\n        get a relative volume link\n\n        Args:\n            number(int): the volume number\n            inc(int): the relative increment\n\n        Returns(str):\n            a relative volume link\n        \"\"\"\n        href, text = cls.volLinkParts(number, inc)\n        if number &gt; 0:\n            link = f\"\"\"&lt;a href=\"{href}\"&gt;{text}&lt;/a&gt;\"\"\"\n        else:\n            link = \"\"\n        return link\n\n    @classmethod\n    def volLink_soup_tag(cls, soup, number: int, inc: int = 0) -&gt; str:\n        \"\"\"\n        get a relative volume link as a soup tag\n\n        Args:\n            soup(BeautifulSoup): the soup\n            number(int): the volume number\n            inc(int): the relative increment\n\n        Returns(str):\n            a relative volume link\n        \"\"\"\n        href, text = cls.volLinkParts(number, inc)\n        link = soup.new_tag(\"a\", href=href)\n        link.string = text\n        return link\n\n    @classmethod\n    def create_icon_list(\n        cls, soup: BeautifulSoup, icon_list: typing.List[typing.Dict[str, str]]\n    ) -&gt; typing.List[\"Tag\"]:\n        \"\"\"\n        create a list of icons\n\n        Args:\n            soup: The BeautifulSoup object to use for creating new tags.\n            icon_list: The list of icons to add to the &lt;div&gt; tag. Each icon is represented as a\n                dictionary with the following keys:\n                    - src (str): The URL of the icon image file.\n                    - title (str): The title text to use as a tooltip for the icon.\n                    - link (str): The URL to link to when the icon is clicked.\n\n        Returns:\n            a list of link_tags\n        \"\"\"\n        link_tags = []\n        # iterate over the icon list and create a new tag for each icon\n        for icon_data in icon_list:\n            # create a new a tag for the link\n            link_tag = soup.new_tag(\"a\")\n            link_tag[\"href\"] = icon_data[\"link\"]\n            # open link in new tab\n            link_tag[\"target\"] = \"_blank\"\n            if not icon_data[\"valid\"]:\n                link_tag[\"style\"] = \"filter: grayscale(1);\"\n\n            # create a new img tag for the icon\n            icon_tag = soup.new_tag(\"img\")\n\n            # add the icon attributes to the img tag\n            icon_tag[\"src\"] = icon_data[\"src\"]\n            icon_tag[\"title\"] = icon_data[\"title\"]\n\n            # append the icon tag to the link tag\n            link_tag.append(icon_tag)\n            link_tags.append(link_tag)\n        return link_tags\n\n    @classmethod\n    def create_icon_bar(\n        cls,\n        soup: BeautifulSoup,\n        icon_list: typing.List[typing.Dict[str, str]],\n        class_name: str = \"icon_list\",\n    ) -&gt; \"Tag\":\n        \"\"\"\n        Creates a new &lt;div&gt; tag with the specified class name and list of icons.\n\n        Args:\n            soup: The BeautifulSoup object to use for creating new tags.\n            icon_list: The list of icons to add to the &lt;div&gt; tag. Each icon is represented as a\n                dictionary with the following keys:\n                    - src (str): The URL of the icon image file.\n                    - title (str): The title text to use as a tooltip for the icon.\n                    - link (str): The URL to link to when the icon is clicked.\n            class_name: The name of the CSS class to apply to the &lt;div&gt; tag.\n\n        Returns:\n            Tag: The new &lt;div&gt; tag with the specified class name and list of icons.\n        \"\"\"\n\n        # create a new div tag\n        div_tag = soup.new_tag(\"div\")\n\n        div_tag.append(soup.new_tag(\"hr\"))\n\n        # add the specified class name to the div tag\n        div_tag[\"class\"] = [class_name]\n\n        for link_tag in cls.create_icon_list(soup, icon_list):\n            # append the link tag to the div tag\n            div_tag.append(link_tag)\n\n        # return the div tag\n        return div_tag\n\n    def getIconBar(self, soup):\n        \"\"\"\n        get my icon bar\n\n        Parameters:\n            soup: The BeautifulSoup object to use for creating new tags.\n        \"\"\"\n        volume_record = self.vm.getVolumeRecord(self.number)\n        for wd_key, attr in [\n            (\"wd.event\", \"wd_event\"),\n            (\"wd.eventSeries\", \"wd_event_series\"),\n        ]:\n            value = None\n            if wd_key in volume_record:\n                value = volume_record[wd_key]\n                if value:\n                    value = value.replace(\"http://www.wikidata.org/entity/\", \"\")\n            setattr(self, attr, value)\n        # create a list of icons to add to the div\n        icon_list = [\n            {\n                \"src\": \"/static/icons/32px-dblp-icon.png\",\n                \"title\": \"dblp\",\n                \"link\": f\"https://dblp.org/rec/{self.dblp}\",\n                \"valid\": self.dblp,\n            },\n            {\n                \"src\": \"/static/icons/32px-DNB.svg.png\",\n                \"title\": \"k10plus/DNB\",\n                \"link\": f\"https://opac.k10plus.de/DB=2.299/PPNSET?PPN={self.k10plus}\",\n                \"valid\": self.k10plus,\n            },\n            {\n                \"src\": \"/static/icons/32px-Scholia_logo.svg.png\",\n                \"title\": \"Proceedings@scholia\",\n                \"link\": f\"https://scholia.toolforge.org/venue/{self.wikidataid}\",\n                \"valid\": self.wikidataid,\n            },\n            {\n                \"src\": \"/static/icons/32px-EventIcon.png\",\n                \"title\": \"Event@scholia\",\n                \"link\": f\"https://scholia.toolforge.org/event/{self.wd_event}\",\n                \"valid\": self.wd_event,\n            },\n            {\n                \"src\": \"/static/icons/32px-EventSeriesIcon.png\",\n                \"title\": \"EventSeries@scholia\",\n                \"link\": f\"https://scholia.toolforge.org/event-series/{self.wd_event_series}\",\n                \"valid\": self.wd_event_series,\n            },\n            {\n                \"src\": \"/static/icons/32px-Wikidata_Query_Service_Favicon_wbg.svg.png\",\n                \"title\": \"Proceedings@wikidata\",\n                \"link\": f\"https://www.wikidata.org/wiki/{self.wikidataid}\",\n                \"valid\": self.wikidataid,\n            },\n            {\n                \"src\": \"/static/icons/32px-EventIcon.png\",\n                \"title\": \"Event@wikidata\",\n                \"link\": f\"https://www.wikidata.org/wiki/{self.wd_event}\",\n                \"valid\": self.wd_event,\n            },\n            {\n                \"src\": \"/static/icons/32px-EventSeriesIcon.png\",\n                \"title\": \"EventSeries@wikidata\",\n                \"link\": f\"https://www.wikidata.org/wiki/{self.wd_event_series}\",\n                \"valid\": self.wd_event_series,\n            },\n            {\n                \"src\": \"/static/icons/32px-SMW-icon.png\",\n                \"title\": \"SMW markup\",\n                \"link\": f\"/Vol-{self.number}.smw\",\n                \"valid\": True,\n            },\n            {\n                \"src\": \"/static/icons/32px-JSON_vector_logo.svg.png\",\n                \"title\": \"JSON metadata\",\n                \"link\": f\"/Vol-{self.number}.json\",\n                \"valid\": True,\n            },\n            {\n                \"src\": \"/static/icons/32px-YAML_Logo.svg.png\",\n                \"title\": \"YML metadata\",\n                \"link\": f\"/Vol-{self.number}.yaml\",\n                \"valid\": True,\n            },\n        ]\n        icon_tag = Volume.create_icon_bar(soup, icon_list=icon_list)\n        return icon_tag\n\n    def addPaper(self, paper: \"Paper\"):\n        \"\"\"\n        add the given paper\n        \"\"\"\n        # @TODO fixme to use LinkML generated code\n        self.papers.append(paper)\n        paper.paper_index = len(self.papers) - 1\n\n    def fix_element_tag(self, element, tag: str = \"href\", ext: str = \".pdf\"):\n        \"\"\"\n        fix the given element tag\n\n        Args:\n            tag(str): the tag to fix\n            ext(str): the extension\n        \"\"\"\n        org_tag_value = element[tag]\n        value = org_tag_value.replace(\"http://ceur-ws.org/\", \"/\")\n        for file in [\"ceur-ws.css\", \"CEUR-WS-logo.png\"]:\n            value = value.replace(f\"../{file}\", f\"/static/{file}\")\n        if \".pdf\" in value:\n            value = value.replace(\".pdf\", ext)\n            value = f\"/Vol-{self.number}/{value}\"\n            pass\n        element[tag] = value\n\n    def add_volume_navigation(self, soup: BeautifulSoup):\n        \"\"\"\n        Add navigation bar to volume number to jump to the volume below and above\n        Args:\n            soup: index page\n        \"\"\"\n        vol_tag = soup.find(\"span\", class_=\"CEURVOLNR\")\n        if vol_tag:\n            prev_link = Volume.volLink_soup_tag(soup, self.number, -1)\n            if prev_link:\n                vol_tag.insert_before(prev_link)\n            next_link = Volume.volLink_soup_tag(soup, self.number, +1)\n            if next_link:\n                vol_tag.insert_after(next_link)\n\n    def get_empty_volume_page(self, content_html: str = None):\n        \"\"\"\n        Get empty volume page\n        \"\"\"\n        html_page = f\"\"\"\n            &lt;!DOCTYPE html&gt;\n            &lt;!-- CEURVERSION=2020-07-09 --&gt;\n            &lt;html lang=\"en\"&gt;\n            &lt;head&gt;\n            &lt;meta http-equiv=\"Content-type\" content=\"text/html;charset=utf-8\"&gt;\n            &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n            &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/ceur-ws.css\"&gt;\n            &lt;/head&gt;\n            &lt;!--CEURLANG=eng --&gt;\n            &lt;body&gt;\n\n            &lt;table style=\"border: 0; border-spacing: 0; border-collapse: collapse; width: 95%\"&gt;\n            &lt;tbody&gt;&lt;tr&gt;\n            &lt;td style=\"text-align: left; vertical-align: middle\"&gt;\n            &lt;a href=\"http://ceur-ws.org/\"&gt;&lt;div id=\"CEURWSLOGO\"&gt;&lt;/div&gt;&lt;/a&gt;\n            &lt;/td&gt;\n            &lt;td style=\"text-align: right; vertical-align: middle\"&gt;\n            &lt;div style=\"float:left\" id=\"CEURCCBY\"&gt;&lt;/div&gt;\n            &lt;span class=\"CEURVOLNR\"&gt;Vol-{self.number}&lt;/span&gt; &lt;br&gt;\n            &lt;span class=\"CEURURN\"&gt;urn:nbn:de:0074-3365-4&lt;/span&gt;\n            &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;/tbody&gt;&lt;/table&gt;\n            {content_html}\n            &lt;/body&gt;&lt;/html&gt;\n        \"\"\"\n        soup = BeautifulSoup(html_page, \"html.parser\")\n        self.add_volume_navigation(soup)\n        content = soup.prettify(formatter=\"html\")\n        return content\n\n    def getHtml(self, ext: str = \".pdf\", fixLinks: bool = True) -&gt; str:\n        \"\"\"\n        get my HTML content\n\n        Args:\n            ext(str): the extension to use for pdf page details\n            fixLinks(bool): if True fix the links\n        \"\"\"\n        index_path = f\"{self.vol_dir}/index.html\"\n        try:\n            with open(index_path, \"r\") as index_html:\n                content = index_html.read()\n                if fixLinks:\n                    soup = BeautifulSoup(content, \"html.parser\")\n                    for element in soup.findAll([\"link\", \"a\"]):\n                        self.fix_element_tag(element, tag=\"href\", ext=ext)\n                    for element in soup.findAll([\"image\"]):\n                        self.fix_element_tag(element, tag=\"src\", ext=ext)\n                    self.add_volume_navigation(soup)\n                    first_hr = soup.find(\"hr\")\n                    if first_hr:\n                        icon_bar = self.getIconBar(soup)\n                        first_hr.insert_before(icon_bar)\n                    content = soup.prettify(formatter=\"html\")\n            return content\n        except Exception as ex:\n            err_html = f\"\"\"&lt;span style=\"color:red\"&gt;reading {index_path} for Volume {self.number} failed: {str(ex)}&lt;/span&gt;\"\"\"\n            content = self.get_empty_volume_page(err_html)\n            return content\n\n    def as_smw_markup(self) -&gt; str:\n        \"\"\"\n        return my semantic mediawiki markup\n\n        Returns:\n            str: the smw markup for this volume\n        \"\"\"\n        markup = f\"\"\"=Volume=\n{{{{Volume\n|number={self.number}\n|storemode=property\n|wikidataid={self.wikidataid}\n|title={self.title}\n|acronym={self.acronym}\n|url={self.url}\n|date={self.date}\n\"\"\"\n        for attr in [\"dblp\", \"k10plus\"]:\n            value = getattr(self, attr)\n            if value:\n                markup += f\"|{attr}={value}\\n\"\n        markup += f\"\"\"|urn=urn:nbn:de:0074-1155-8\n}}}}\"\"\"\n        return markup\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.addPaper","title":"<code>addPaper(paper)</code>","text":"<p>add the given paper</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def addPaper(self, paper: \"Paper\"):\n    \"\"\"\n    add the given paper\n    \"\"\"\n    # @TODO fixme to use LinkML generated code\n    self.papers.append(paper)\n    paper.paper_index = len(self.papers) - 1\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.add_volume_navigation","title":"<code>add_volume_navigation(soup)</code>","text":"<p>Add navigation bar to volume number to jump to the volume below and above Args:     soup: index page</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def add_volume_navigation(self, soup: BeautifulSoup):\n    \"\"\"\n    Add navigation bar to volume number to jump to the volume below and above\n    Args:\n        soup: index page\n    \"\"\"\n    vol_tag = soup.find(\"span\", class_=\"CEURVOLNR\")\n    if vol_tag:\n        prev_link = Volume.volLink_soup_tag(soup, self.number, -1)\n        if prev_link:\n            vol_tag.insert_before(prev_link)\n        next_link = Volume.volLink_soup_tag(soup, self.number, +1)\n        if next_link:\n            vol_tag.insert_after(next_link)\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.as_smw_markup","title":"<code>as_smw_markup()</code>","text":"<p>return my semantic mediawiki markup</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the smw markup for this volume</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>    def as_smw_markup(self) -&gt; str:\n        \"\"\"\n        return my semantic mediawiki markup\n\n        Returns:\n            str: the smw markup for this volume\n        \"\"\"\n        markup = f\"\"\"=Volume=\n{{{{Volume\n|number={self.number}\n|storemode=property\n|wikidataid={self.wikidataid}\n|title={self.title}\n|acronym={self.acronym}\n|url={self.url}\n|date={self.date}\n\"\"\"\n        for attr in [\"dblp\", \"k10plus\"]:\n            value = getattr(self, attr)\n            if value:\n                markup += f\"|{attr}={value}\\n\"\n        markup += f\"\"\"|urn=urn:nbn:de:0074-1155-8\n}}}}\"\"\"\n        return markup\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.create_icon_bar","title":"<code>create_icon_bar(soup, icon_list, class_name='icon_list')</code>  <code>classmethod</code>","text":"<p>Creates a new  tag with the specified class name and list of icons. <p>Parameters:</p> Name Type Description Default <code>soup</code> <code>BeautifulSoup</code> <p>The BeautifulSoup object to use for creating new tags.</p> required <code>icon_list</code> <code>List[Dict[str, str]]</code> <p>The list of icons to add to the  tag. Each icon is represented as a dictionary with the following keys:     - src (str): The URL of the icon image file.     - title (str): The title text to use as a tooltip for the icon.     - link (str): The URL to link to when the icon is clicked. required <code>class_name</code> <code>str</code> <p>The name of the CSS class to apply to the  tag. <code>'icon_list'</code> <p>Returns:</p> Name Type Description <code>Tag</code> <code>Tag</code> <p>The new  tag with the specified class name and list of icons. Source code in <code>ceurspt/ceurws.py</code> <pre><code>@classmethod\ndef create_icon_bar(\n    cls,\n    soup: BeautifulSoup,\n    icon_list: typing.List[typing.Dict[str, str]],\n    class_name: str = \"icon_list\",\n) -&gt; \"Tag\":\n    \"\"\"\n    Creates a new &lt;div&gt; tag with the specified class name and list of icons.\n\n    Args:\n        soup: The BeautifulSoup object to use for creating new tags.\n        icon_list: The list of icons to add to the &lt;div&gt; tag. Each icon is represented as a\n            dictionary with the following keys:\n                - src (str): The URL of the icon image file.\n                - title (str): The title text to use as a tooltip for the icon.\n                - link (str): The URL to link to when the icon is clicked.\n        class_name: The name of the CSS class to apply to the &lt;div&gt; tag.\n\n    Returns:\n        Tag: The new &lt;div&gt; tag with the specified class name and list of icons.\n    \"\"\"\n\n    # create a new div tag\n    div_tag = soup.new_tag(\"div\")\n\n    div_tag.append(soup.new_tag(\"hr\"))\n\n    # add the specified class name to the div tag\n    div_tag[\"class\"] = [class_name]\n\n    for link_tag in cls.create_icon_list(soup, icon_list):\n        # append the link tag to the div tag\n        div_tag.append(link_tag)\n\n    # return the div tag\n    return div_tag\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.create_icon_list","title":"<code>create_icon_list(soup, icon_list)</code>  <code>classmethod</code>","text":"<p>create a list of icons</p> <p>Parameters:</p> Name Type Description Default <code>soup</code> <code>BeautifulSoup</code> <p>The BeautifulSoup object to use for creating new tags.</p> required <code>icon_list</code> <code>List[Dict[str, str]]</code> <p>The list of icons to add to the  tag. Each icon is represented as a dictionary with the following keys:     - src (str): The URL of the icon image file.     - title (str): The title text to use as a tooltip for the icon.     - link (str): The URL to link to when the icon is clicked. required <p>Returns:</p> Type Description <code>List[Tag]</code> <p>a list of link_tags</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>@classmethod\ndef create_icon_list(\n    cls, soup: BeautifulSoup, icon_list: typing.List[typing.Dict[str, str]]\n) -&gt; typing.List[\"Tag\"]:\n    \"\"\"\n    create a list of icons\n\n    Args:\n        soup: The BeautifulSoup object to use for creating new tags.\n        icon_list: The list of icons to add to the &lt;div&gt; tag. Each icon is represented as a\n            dictionary with the following keys:\n                - src (str): The URL of the icon image file.\n                - title (str): The title text to use as a tooltip for the icon.\n                - link (str): The URL to link to when the icon is clicked.\n\n    Returns:\n        a list of link_tags\n    \"\"\"\n    link_tags = []\n    # iterate over the icon list and create a new tag for each icon\n    for icon_data in icon_list:\n        # create a new a tag for the link\n        link_tag = soup.new_tag(\"a\")\n        link_tag[\"href\"] = icon_data[\"link\"]\n        # open link in new tab\n        link_tag[\"target\"] = \"_blank\"\n        if not icon_data[\"valid\"]:\n            link_tag[\"style\"] = \"filter: grayscale(1);\"\n\n        # create a new img tag for the icon\n        icon_tag = soup.new_tag(\"img\")\n\n        # add the icon attributes to the img tag\n        icon_tag[\"src\"] = icon_data[\"src\"]\n        icon_tag[\"title\"] = icon_data[\"title\"]\n\n        # append the icon tag to the link tag\n        link_tag.append(icon_tag)\n        link_tags.append(link_tag)\n    return link_tags\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.fix_element_tag","title":"<code>fix_element_tag(element, tag='href', ext='.pdf')</code>","text":"<p>fix the given element tag</p> <p>Parameters:</p> Name Type Description Default <code>tag(str)</code> <p>the tag to fix</p> required <code>ext(str)</code> <p>the extension</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def fix_element_tag(self, element, tag: str = \"href\", ext: str = \".pdf\"):\n    \"\"\"\n    fix the given element tag\n\n    Args:\n        tag(str): the tag to fix\n        ext(str): the extension\n    \"\"\"\n    org_tag_value = element[tag]\n    value = org_tag_value.replace(\"http://ceur-ws.org/\", \"/\")\n    for file in [\"ceur-ws.css\", \"CEUR-WS-logo.png\"]:\n        value = value.replace(f\"../{file}\", f\"/static/{file}\")\n    if \".pdf\" in value:\n        value = value.replace(\".pdf\", ext)\n        value = f\"/Vol-{self.number}/{value}\"\n        pass\n    element[tag] = value\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.getHtml","title":"<code>getHtml(ext='.pdf', fixLinks=True)</code>","text":"<p>get my HTML content</p> <p>Parameters:</p> Name Type Description Default <code>ext(str)</code> <p>the extension to use for pdf page details</p> required <code>fixLinks(bool)</code> <p>if True fix the links</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getHtml(self, ext: str = \".pdf\", fixLinks: bool = True) -&gt; str:\n    \"\"\"\n    get my HTML content\n\n    Args:\n        ext(str): the extension to use for pdf page details\n        fixLinks(bool): if True fix the links\n    \"\"\"\n    index_path = f\"{self.vol_dir}/index.html\"\n    try:\n        with open(index_path, \"r\") as index_html:\n            content = index_html.read()\n            if fixLinks:\n                soup = BeautifulSoup(content, \"html.parser\")\n                for element in soup.findAll([\"link\", \"a\"]):\n                    self.fix_element_tag(element, tag=\"href\", ext=ext)\n                for element in soup.findAll([\"image\"]):\n                    self.fix_element_tag(element, tag=\"src\", ext=ext)\n                self.add_volume_navigation(soup)\n                first_hr = soup.find(\"hr\")\n                if first_hr:\n                    icon_bar = self.getIconBar(soup)\n                    first_hr.insert_before(icon_bar)\n                content = soup.prettify(formatter=\"html\")\n        return content\n    except Exception as ex:\n        err_html = f\"\"\"&lt;span style=\"color:red\"&gt;reading {index_path} for Volume {self.number} failed: {str(ex)}&lt;/span&gt;\"\"\"\n        content = self.get_empty_volume_page(err_html)\n        return content\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.getIconBar","title":"<code>getIconBar(soup)</code>","text":"<p>get my icon bar</p> <p>Parameters:</p> Name Type Description Default <code>soup</code> <p>The BeautifulSoup object to use for creating new tags.</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getIconBar(self, soup):\n    \"\"\"\n    get my icon bar\n\n    Parameters:\n        soup: The BeautifulSoup object to use for creating new tags.\n    \"\"\"\n    volume_record = self.vm.getVolumeRecord(self.number)\n    for wd_key, attr in [\n        (\"wd.event\", \"wd_event\"),\n        (\"wd.eventSeries\", \"wd_event_series\"),\n    ]:\n        value = None\n        if wd_key in volume_record:\n            value = volume_record[wd_key]\n            if value:\n                value = value.replace(\"http://www.wikidata.org/entity/\", \"\")\n        setattr(self, attr, value)\n    # create a list of icons to add to the div\n    icon_list = [\n        {\n            \"src\": \"/static/icons/32px-dblp-icon.png\",\n            \"title\": \"dblp\",\n            \"link\": f\"https://dblp.org/rec/{self.dblp}\",\n            \"valid\": self.dblp,\n        },\n        {\n            \"src\": \"/static/icons/32px-DNB.svg.png\",\n            \"title\": \"k10plus/DNB\",\n            \"link\": f\"https://opac.k10plus.de/DB=2.299/PPNSET?PPN={self.k10plus}\",\n            \"valid\": self.k10plus,\n        },\n        {\n            \"src\": \"/static/icons/32px-Scholia_logo.svg.png\",\n            \"title\": \"Proceedings@scholia\",\n            \"link\": f\"https://scholia.toolforge.org/venue/{self.wikidataid}\",\n            \"valid\": self.wikidataid,\n        },\n        {\n            \"src\": \"/static/icons/32px-EventIcon.png\",\n            \"title\": \"Event@scholia\",\n            \"link\": f\"https://scholia.toolforge.org/event/{self.wd_event}\",\n            \"valid\": self.wd_event,\n        },\n        {\n            \"src\": \"/static/icons/32px-EventSeriesIcon.png\",\n            \"title\": \"EventSeries@scholia\",\n            \"link\": f\"https://scholia.toolforge.org/event-series/{self.wd_event_series}\",\n            \"valid\": self.wd_event_series,\n        },\n        {\n            \"src\": \"/static/icons/32px-Wikidata_Query_Service_Favicon_wbg.svg.png\",\n            \"title\": \"Proceedings@wikidata\",\n            \"link\": f\"https://www.wikidata.org/wiki/{self.wikidataid}\",\n            \"valid\": self.wikidataid,\n        },\n        {\n            \"src\": \"/static/icons/32px-EventIcon.png\",\n            \"title\": \"Event@wikidata\",\n            \"link\": f\"https://www.wikidata.org/wiki/{self.wd_event}\",\n            \"valid\": self.wd_event,\n        },\n        {\n            \"src\": \"/static/icons/32px-EventSeriesIcon.png\",\n            \"title\": \"EventSeries@wikidata\",\n            \"link\": f\"https://www.wikidata.org/wiki/{self.wd_event_series}\",\n            \"valid\": self.wd_event_series,\n        },\n        {\n            \"src\": \"/static/icons/32px-SMW-icon.png\",\n            \"title\": \"SMW markup\",\n            \"link\": f\"/Vol-{self.number}.smw\",\n            \"valid\": True,\n        },\n        {\n            \"src\": \"/static/icons/32px-JSON_vector_logo.svg.png\",\n            \"title\": \"JSON metadata\",\n            \"link\": f\"/Vol-{self.number}.json\",\n            \"valid\": True,\n        },\n        {\n            \"src\": \"/static/icons/32px-YAML_Logo.svg.png\",\n            \"title\": \"YML metadata\",\n            \"link\": f\"/Vol-{self.number}.yaml\",\n            \"valid\": True,\n        },\n    ]\n    icon_tag = Volume.create_icon_bar(soup, icon_list=icon_list)\n    return icon_tag\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.getMergedDict","title":"<code>getMergedDict()</code>","text":"<p>get my merged dict</p> <p>Returns:</p> Type Description <code>dict</code> <p>dict</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getMergedDict(self) -&gt; dict:\n    \"\"\"\n    get my merged dict\n\n    Returns:\n        dict\n    \"\"\"\n    my_dict = dataclasses.asdict(self)\n    m_dict = {\n        \"version.version\": Version.version,\n        \"version.cm_url\": Version.cm_url,\n        \"spt.html_url\": f\"/Vol-{self.number}.html\",\n    }\n    for key, value in my_dict.items():\n        m_dict[f\"spt.{key}\"] = value\n    volrecord = self.vm.getVolumeRecord(self.number)\n    for key, value in volrecord.items():\n        if \".\" in key:\n            m_dict[f\"{key}\"] = value\n        else:\n            m_dict[f\"cvb.{key}\"] = value\n    return m_dict\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.get_empty_volume_page","title":"<code>get_empty_volume_page(content_html=None)</code>","text":"<p>Get empty volume page</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>def get_empty_volume_page(self, content_html: str = None):\n    \"\"\"\n    Get empty volume page\n    \"\"\"\n    html_page = f\"\"\"\n        &lt;!DOCTYPE html&gt;\n        &lt;!-- CEURVERSION=2020-07-09 --&gt;\n        &lt;html lang=\"en\"&gt;\n        &lt;head&gt;\n        &lt;meta http-equiv=\"Content-type\" content=\"text/html;charset=utf-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/ceur-ws.css\"&gt;\n        &lt;/head&gt;\n        &lt;!--CEURLANG=eng --&gt;\n        &lt;body&gt;\n\n        &lt;table style=\"border: 0; border-spacing: 0; border-collapse: collapse; width: 95%\"&gt;\n        &lt;tbody&gt;&lt;tr&gt;\n        &lt;td style=\"text-align: left; vertical-align: middle\"&gt;\n        &lt;a href=\"http://ceur-ws.org/\"&gt;&lt;div id=\"CEURWSLOGO\"&gt;&lt;/div&gt;&lt;/a&gt;\n        &lt;/td&gt;\n        &lt;td style=\"text-align: right; vertical-align: middle\"&gt;\n        &lt;div style=\"float:left\" id=\"CEURCCBY\"&gt;&lt;/div&gt;\n        &lt;span class=\"CEURVOLNR\"&gt;Vol-{self.number}&lt;/span&gt; &lt;br&gt;\n        &lt;span class=\"CEURURN\"&gt;urn:nbn:de:0074-3365-4&lt;/span&gt;\n        &lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tbody&gt;&lt;/table&gt;\n        {content_html}\n        &lt;/body&gt;&lt;/html&gt;\n    \"\"\"\n    soup = BeautifulSoup(html_page, \"html.parser\")\n    self.add_volume_navigation(soup)\n    content = soup.prettify(formatter=\"html\")\n    return content\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.volLink","title":"<code>volLink(number, inc=0)</code>  <code>classmethod</code>","text":"<p>get a relative volume link</p> <p>Parameters:</p> Name Type Description Default <code>number(int)</code> <p>the volume number</p> required <code>inc(int)</code> <p>the relative increment</p> required <p>Returns(str):     a relative volume link</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>@classmethod\ndef volLink(cls, number: int, inc: int = 0) -&gt; str:\n    \"\"\"\n    get a relative volume link\n\n    Args:\n        number(int): the volume number\n        inc(int): the relative increment\n\n    Returns(str):\n        a relative volume link\n    \"\"\"\n    href, text = cls.volLinkParts(number, inc)\n    if number &gt; 0:\n        link = f\"\"\"&lt;a href=\"{href}\"&gt;{text}&lt;/a&gt;\"\"\"\n    else:\n        link = \"\"\n    return link\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.volLinkParts","title":"<code>volLinkParts(number, inc=0)</code>  <code>classmethod</code>","text":"<p>a relative volume link</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>@classmethod\ndef volLinkParts(cls, number: int, inc: int = 0):\n    \"\"\"\n    a relative volume link\n    \"\"\"\n    if inc &gt; 0:\n        presymbol = \"\u2af8\"\n        postsymbol = \"\"\n    elif inc &lt; 0:\n        presymbol = \"\"\n        postsymbol = \"\u2af7\"\n    else:\n        presymbol = \"\"\n        postsymbol = \"\"\n    href = f\"/Vol-{number+inc}.html\"\n    text = f\"{presymbol}Vol-{number+inc}{postsymbol}\"\n    return href, text\n</code></pre>"},{"location":"#ceurspt.ceurws.Volume.volLink_soup_tag","title":"<code>volLink_soup_tag(soup, number, inc=0)</code>  <code>classmethod</code>","text":"<p>get a relative volume link as a soup tag</p> <p>Parameters:</p> Name Type Description Default <code>soup(BeautifulSoup)</code> <p>the soup</p> required <code>number(int)</code> <p>the volume number</p> required <code>inc(int)</code> <p>the relative increment</p> required <p>Returns(str):     a relative volume link</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>@classmethod\ndef volLink_soup_tag(cls, soup, number: int, inc: int = 0) -&gt; str:\n    \"\"\"\n    get a relative volume link as a soup tag\n\n    Args:\n        soup(BeautifulSoup): the soup\n        number(int): the volume number\n        inc(int): the relative increment\n\n    Returns(str):\n        a relative volume link\n    \"\"\"\n    href, text = cls.volLinkParts(number, inc)\n    link = soup.new_tag(\"a\", href=href)\n    link.string = text\n    return link\n</code></pre>"},{"location":"#ceurspt.ceurws.VolumeManager","title":"<code>VolumeManager</code>","text":"<p>               Bases: <code>JsonCacheManager</code></p> <p>manage all volumes</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>class VolumeManager(JsonCacheManager):\n    \"\"\"\n    manage all volumes\n    \"\"\"\n\n    def __init__(self, base_path: str, base_url: str):\n        \"\"\"\n        initialize me with the given base_path\n\n        Args:\n            base_path(str): the path to my files\n            base_url(str): the url of the RESTFul metadata service\n        \"\"\"\n        JsonCacheManager.__init__(self, base_url=base_url)\n        self.base_path = base_path\n        self.volumes_by_number: Dict[int, Volume] = {}\n        self.volume_records_by_number: Dict[int, dict] = {}\n\n    def head_table_html(self) -&gt; str:\n        \"\"\" \"\"\"\n        html = \"\"\"&lt;table width=\"97%\" cellspacing=\"5\" cellpadding=\"0\" border=\"0\"&gt;\n&lt;tbody&gt;&lt;tr&gt;\n&lt;td valign=\"middle\" align=\"left\"&gt;\n&lt;div id=\"CEURWSLOGO\"&gt;&lt;/div&gt;\n&lt;!--&lt;img alt=\"[25years CEUR-WS]\" style=\"padding:4px; float:left;\"  width=\"550\" src=\"./CEUR-WS-logo-originals/2020/CEUR-WS-25anniversary.png\"&gt; --&gt;\n&lt;/td&gt;\n&lt;td valign=\"middle\" align=\"justify\"&gt;\n&lt;font size=\"-2\" face=\"ARIAL,HELVETICA,VERDANA\" color=\"#363636\"&gt;\n\n&lt;img alt=\"[OpenAccess]\" style=\"padding:6px; float:left;\" src=\"/static/OpenAccesslogo_200x313.png\" width=\"18\"&gt;\nCEUR Workshop Proceedings (CEUR-WS.org) is a\n&lt;a href=\"https://ceur-ws.org/CEURWS-VALUES.html\"&gt;free&lt;/a&gt;\n&lt;a href=\"http://www.sherpa.ac.uk/romeo/issn/1613-0073/\"&gt;open-access&lt;/a&gt;\npublication service\nat &lt;a href=\"http://sunsite.informatik.rwth-aachen.de\"&gt;Sun SITE Central Europe&lt;/a&gt;\noperated under the umbrella of\n &lt;a href=\"http://www-i5.informatik.rwth-aachen.de\"&gt;RWTH Aachen University&lt;/a&gt;.\nCEUR-WS.org is a recognized ISSN publication series,\n&lt;a href=\"https://ceur-ws.org/issn-1613-0073.html\"&gt;ISSN 1613-0073&lt;/a&gt; (&lt;a href=\"https://portal.issn.org/resource/ISSN/1613-0073?format=json\"&gt;json&lt;/a&gt;).\nCEUR-WS.org is hosted at http://SunSITE.Informatik.RWTH-Aachen.DE/Publications/CEUR-WS/.\nThis service is provided by\nthe &lt;b&gt;&lt;a href=\"https://ceur-ws.org/CEURWS-TEAM.html\"&gt;CEUR-WS.org Team&lt;/a&gt;&lt;/b&gt;.\nSee end of the page for contact details and &lt;a href=\"https://ceur-ws.org/#IMPRESSUM\"&gt;Impressum&lt;/a&gt;.\n&lt;/font&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\"\"\"\n        return html\n\n    def index_html(\n        self, upper: Optional[int] = None, lower: Optional[int] = None\n    ) -&gt; str:\n        \"\"\"\n        return an index going from the given upper volume number down to the given lower volume number\n\n        Args:\n            upper(int): upper volume number to start with\n            lower(int): lower volume number to end with\n\n        Returns:\n            html code for index\n        \"\"\"\n        html = f\"\"\"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n   \"https://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n  &lt;head&gt; \n    &lt;meta http-equiv=\"Content-Type\" content=\"Type=text/html;charset=utf-8\"&gt;\n    &lt;meta name=\"description\" content=\"CEUR-WS.org provides free online scientific papers\"&gt;\n    &lt;meta name=\"keywords\" content=\"open access, open archive, free scientific paper, workshop proceedings, online publishing, computer science, information systems\" &gt;\n\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;!-- automatically refresh daily--&gt;\n    &lt;meta http-equiv=\"expires\" content=\"86400\"&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/ceur-ws.css\"&gt;\n    &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"/static/favicon.ico\"&gt;\n    &lt;title&gt;CEUR-WS.org - CEUR Workshop Proceedings (free, open-access publishing, computer science/information systems)&lt;/title&gt;\n    &lt;link rel=\"shortcut icon\" href=\"/static/ceur-ws.ico\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     {self.head_table_html()}\n     &lt;div&gt;\n\"\"\"\n        # prepare the indexing\n        # get the volumes as a list from 1 - top e.g. 3365\n        volumes = list(self.volumes_by_number.values())\n        # reverse the list\n        volumes.reverse()\n        # make sure upper and lower values are valid\n        if upper is None:\n            upper = volumes[0].number\n        if lower is None:\n            lower = 1\n        # loop over the reversed list\n        for vol_index in range(len(volumes)):\n            vol = volumes[vol_index]\n            vol_number = vol.number\n            if vol_number &gt; upper:\n                continue\n            if vol_number &lt; lower:\n                break\n            if isinstance(vol.title, str):\n                vol_title = escape(vol.title)\n            else:\n                vol_title = \"Title missing (Might be one of the empty volumes)\"\n            if vol_title is None:\n                pass\n            html += f\"\"\"       &lt;div style='bgcolor:#DCDBD7'&gt;\n         &lt;b&gt;&lt;a name='Vol-{vol_number}'&gt;Vol-{vol_number}&lt;/a&gt;&lt;/b&gt;\n         &lt;a href='/Vol-{vol_number}.html'&gt;{vol_title}&lt;/a&gt;\n       &lt;/div&gt;\n\"\"\"\n        html += \"\"\"    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\"\"\"\n        return html\n\n    def getVolume(self, number: int):\n        \"\"\"\n        get my volume by volume number\n\n        Args:\n            number(int): the volume to get\n        \"\"\"\n        if number in self.volumes_by_number:\n            return self.volumes_by_number[number]\n        else:\n            return None\n\n    def getVolumeRecord(self, number: int):\n        if number in self.volume_records_by_number:\n            return self.volume_records_by_number[number]\n        else:\n            return None\n\n    def getVolumes(self, verbose: bool = False):\n        \"\"\"\n        get my volumes\n\n        Args:\n            verbose(bool): if True show verbose loading information\n        \"\"\"\n        profiler = Profiler(\"Loading volumes\", profile=verbose)\n        volume_lod = self.load_lod(\"volumes\")\n        proceedings_lod = self.load_lod(\"proceedings\")\n        self.volumes_by_number = {}\n        self.volume_records_by_number = {}\n        for volume_record in volume_lod:\n            vol_number = volume_record[\"number\"]\n            self.volume_records_by_number[vol_number] = volume_record\n            title = volume_record[\"title\"]\n            pub_date_str = volume_record[\"pubDate\"]\n            if pub_date_str:\n                pub_date = datetime.fromisoformat(pub_date_str).date()\n            else:\n                pub_date = None\n            acronym = volume_record[\"acronym\"]\n            volume = Volume(\n                number=vol_number, title=title, date=pub_date, acronym=acronym\n            )\n            volume.vm = self\n            volume.number = int(volume.number)\n            vol_dir = f\"{self.base_path}/Vol-{vol_number}\"\n            if os.path.isdir(vol_dir):\n                volume.vol_dir = vol_dir\n            else:\n                volume.vol_dir = None\n            self.volumes_by_number[vol_number] = volume\n        for proc_record in proceedings_lod:\n            number = proc_record[\"sVolume\"]\n            if not number:\n                print(f\"Warning: {proc_record} has no volume number\")\n            else:\n                volume_record = self.volume_records_by_number[number]\n                volume = self.volumes_by_number[number]\n                for key, value in proc_record.items():\n                    volume_record[f\"wd.{key}\"] = value\n                map_pairs = [\n                    (\"item\", \"wikidataid\"),\n                    (\"itemDescription\", \"description\"),\n                    (\"dblpProceedingsId\", \"dblp\"),\n                    (\"described_at_URL\", \"url\"),\n                    (\"ppnId\", \"k10plus\"),\n                    (\"URN_NBN\", \"urn\"),\n                ]\n                for wd_id, attr in map_pairs:\n                    wd_key = f\"wd.{wd_id}\"\n                    if wd_key in volume_record:\n                        value = volume_record[wd_key]\n                        if isinstance(value, str):\n                            value = value.replace(\"http://www.wikidata.org/entity/\", \"\")\n                            value = value.replace(\"https://www.wikidata.org/wiki/\", \"\")\n                        setattr(volume, attr, value)\n                        pass\n        msg = f\"{len(self.volumes_by_number)} volumes\"\n        profiler.time(msg)\n</code></pre>"},{"location":"#ceurspt.ceurws.VolumeManager.__init__","title":"<code>__init__(base_path, base_url)</code>","text":"<p>initialize me with the given base_path</p> <p>Parameters:</p> Name Type Description Default <code>base_path(str)</code> <p>the path to my files</p> required <code>base_url(str)</code> <p>the url of the RESTFul metadata service</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def __init__(self, base_path: str, base_url: str):\n    \"\"\"\n    initialize me with the given base_path\n\n    Args:\n        base_path(str): the path to my files\n        base_url(str): the url of the RESTFul metadata service\n    \"\"\"\n    JsonCacheManager.__init__(self, base_url=base_url)\n    self.base_path = base_path\n    self.volumes_by_number: Dict[int, Volume] = {}\n    self.volume_records_by_number: Dict[int, dict] = {}\n</code></pre>"},{"location":"#ceurspt.ceurws.VolumeManager.getVolume","title":"<code>getVolume(number)</code>","text":"<p>get my volume by volume number</p> <p>Parameters:</p> Name Type Description Default <code>number(int)</code> <p>the volume to get</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getVolume(self, number: int):\n    \"\"\"\n    get my volume by volume number\n\n    Args:\n        number(int): the volume to get\n    \"\"\"\n    if number in self.volumes_by_number:\n        return self.volumes_by_number[number]\n    else:\n        return None\n</code></pre>"},{"location":"#ceurspt.ceurws.VolumeManager.getVolumes","title":"<code>getVolumes(verbose=False)</code>","text":"<p>get my volumes</p> <p>Parameters:</p> Name Type Description Default <code>verbose(bool)</code> <p>if True show verbose loading information</p> required Source code in <code>ceurspt/ceurws.py</code> <pre><code>def getVolumes(self, verbose: bool = False):\n    \"\"\"\n    get my volumes\n\n    Args:\n        verbose(bool): if True show verbose loading information\n    \"\"\"\n    profiler = Profiler(\"Loading volumes\", profile=verbose)\n    volume_lod = self.load_lod(\"volumes\")\n    proceedings_lod = self.load_lod(\"proceedings\")\n    self.volumes_by_number = {}\n    self.volume_records_by_number = {}\n    for volume_record in volume_lod:\n        vol_number = volume_record[\"number\"]\n        self.volume_records_by_number[vol_number] = volume_record\n        title = volume_record[\"title\"]\n        pub_date_str = volume_record[\"pubDate\"]\n        if pub_date_str:\n            pub_date = datetime.fromisoformat(pub_date_str).date()\n        else:\n            pub_date = None\n        acronym = volume_record[\"acronym\"]\n        volume = Volume(\n            number=vol_number, title=title, date=pub_date, acronym=acronym\n        )\n        volume.vm = self\n        volume.number = int(volume.number)\n        vol_dir = f\"{self.base_path}/Vol-{vol_number}\"\n        if os.path.isdir(vol_dir):\n            volume.vol_dir = vol_dir\n        else:\n            volume.vol_dir = None\n        self.volumes_by_number[vol_number] = volume\n    for proc_record in proceedings_lod:\n        number = proc_record[\"sVolume\"]\n        if not number:\n            print(f\"Warning: {proc_record} has no volume number\")\n        else:\n            volume_record = self.volume_records_by_number[number]\n            volume = self.volumes_by_number[number]\n            for key, value in proc_record.items():\n                volume_record[f\"wd.{key}\"] = value\n            map_pairs = [\n                (\"item\", \"wikidataid\"),\n                (\"itemDescription\", \"description\"),\n                (\"dblpProceedingsId\", \"dblp\"),\n                (\"described_at_URL\", \"url\"),\n                (\"ppnId\", \"k10plus\"),\n                (\"URN_NBN\", \"urn\"),\n            ]\n            for wd_id, attr in map_pairs:\n                wd_key = f\"wd.{wd_id}\"\n                if wd_key in volume_record:\n                    value = volume_record[wd_key]\n                    if isinstance(value, str):\n                        value = value.replace(\"http://www.wikidata.org/entity/\", \"\")\n                        value = value.replace(\"https://www.wikidata.org/wiki/\", \"\")\n                    setattr(volume, attr, value)\n                    pass\n    msg = f\"{len(self.volumes_by_number)} volumes\"\n    profiler.time(msg)\n</code></pre>"},{"location":"#ceurspt.ceurws.VolumeManager.head_table_html","title":"<code>head_table_html()</code>","text":"Source code in <code>ceurspt/ceurws.py</code> <pre><code>    def head_table_html(self) -&gt; str:\n        \"\"\" \"\"\"\n        html = \"\"\"&lt;table width=\"97%\" cellspacing=\"5\" cellpadding=\"0\" border=\"0\"&gt;\n&lt;tbody&gt;&lt;tr&gt;\n&lt;td valign=\"middle\" align=\"left\"&gt;\n&lt;div id=\"CEURWSLOGO\"&gt;&lt;/div&gt;\n&lt;!--&lt;img alt=\"[25years CEUR-WS]\" style=\"padding:4px; float:left;\"  width=\"550\" src=\"./CEUR-WS-logo-originals/2020/CEUR-WS-25anniversary.png\"&gt; --&gt;\n&lt;/td&gt;\n&lt;td valign=\"middle\" align=\"justify\"&gt;\n&lt;font size=\"-2\" face=\"ARIAL,HELVETICA,VERDANA\" color=\"#363636\"&gt;\n\n&lt;img alt=\"[OpenAccess]\" style=\"padding:6px; float:left;\" src=\"/static/OpenAccesslogo_200x313.png\" width=\"18\"&gt;\nCEUR Workshop Proceedings (CEUR-WS.org) is a\n&lt;a href=\"https://ceur-ws.org/CEURWS-VALUES.html\"&gt;free&lt;/a&gt;\n&lt;a href=\"http://www.sherpa.ac.uk/romeo/issn/1613-0073/\"&gt;open-access&lt;/a&gt;\npublication service\nat &lt;a href=\"http://sunsite.informatik.rwth-aachen.de\"&gt;Sun SITE Central Europe&lt;/a&gt;\noperated under the umbrella of\n &lt;a href=\"http://www-i5.informatik.rwth-aachen.de\"&gt;RWTH Aachen University&lt;/a&gt;.\nCEUR-WS.org is a recognized ISSN publication series,\n&lt;a href=\"https://ceur-ws.org/issn-1613-0073.html\"&gt;ISSN 1613-0073&lt;/a&gt; (&lt;a href=\"https://portal.issn.org/resource/ISSN/1613-0073?format=json\"&gt;json&lt;/a&gt;).\nCEUR-WS.org is hosted at http://SunSITE.Informatik.RWTH-Aachen.DE/Publications/CEUR-WS/.\nThis service is provided by\nthe &lt;b&gt;&lt;a href=\"https://ceur-ws.org/CEURWS-TEAM.html\"&gt;CEUR-WS.org Team&lt;/a&gt;&lt;/b&gt;.\nSee end of the page for contact details and &lt;a href=\"https://ceur-ws.org/#IMPRESSUM\"&gt;Impressum&lt;/a&gt;.\n&lt;/font&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\"\"\"\n        return html\n</code></pre>"},{"location":"#ceurspt.ceurws.VolumeManager.index_html","title":"<code>index_html(upper=None, lower=None)</code>","text":"<p>return an index going from the given upper volume number down to the given lower volume number</p> <p>Parameters:</p> Name Type Description Default <code>upper(int)</code> <p>upper volume number to start with</p> required <code>lower(int)</code> <p>lower volume number to end with</p> required <p>Returns:</p> Type Description <code>str</code> <p>html code for index</p> Source code in <code>ceurspt/ceurws.py</code> <pre><code>    def index_html(\n        self, upper: Optional[int] = None, lower: Optional[int] = None\n    ) -&gt; str:\n        \"\"\"\n        return an index going from the given upper volume number down to the given lower volume number\n\n        Args:\n            upper(int): upper volume number to start with\n            lower(int): lower volume number to end with\n\n        Returns:\n            html code for index\n        \"\"\"\n        html = f\"\"\"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n   \"https://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n  &lt;head&gt; \n    &lt;meta http-equiv=\"Content-Type\" content=\"Type=text/html;charset=utf-8\"&gt;\n    &lt;meta name=\"description\" content=\"CEUR-WS.org provides free online scientific papers\"&gt;\n    &lt;meta name=\"keywords\" content=\"open access, open archive, free scientific paper, workshop proceedings, online publishing, computer science, information systems\" &gt;\n\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;!-- automatically refresh daily--&gt;\n    &lt;meta http-equiv=\"expires\" content=\"86400\"&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/ceur-ws.css\"&gt;\n    &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"/static/favicon.ico\"&gt;\n    &lt;title&gt;CEUR-WS.org - CEUR Workshop Proceedings (free, open-access publishing, computer science/information systems)&lt;/title&gt;\n    &lt;link rel=\"shortcut icon\" href=\"/static/ceur-ws.ico\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     {self.head_table_html()}\n     &lt;div&gt;\n\"\"\"\n        # prepare the indexing\n        # get the volumes as a list from 1 - top e.g. 3365\n        volumes = list(self.volumes_by_number.values())\n        # reverse the list\n        volumes.reverse()\n        # make sure upper and lower values are valid\n        if upper is None:\n            upper = volumes[0].number\n        if lower is None:\n            lower = 1\n        # loop over the reversed list\n        for vol_index in range(len(volumes)):\n            vol = volumes[vol_index]\n            vol_number = vol.number\n            if vol_number &gt; upper:\n                continue\n            if vol_number &lt; lower:\n                break\n            if isinstance(vol.title, str):\n                vol_title = escape(vol.title)\n            else:\n                vol_title = \"Title missing (Might be one of the empty volumes)\"\n            if vol_title is None:\n                pass\n            html += f\"\"\"       &lt;div style='bgcolor:#DCDBD7'&gt;\n         &lt;b&gt;&lt;a name='Vol-{vol_number}'&gt;Vol-{vol_number}&lt;/a&gt;&lt;/b&gt;\n         &lt;a href='/Vol-{vol_number}.html'&gt;{vol_title}&lt;/a&gt;\n       &lt;/div&gt;\n\"\"\"\n        html += \"\"\"    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\"\"\"\n        return html\n</code></pre>"},{"location":"#ceurspt.ceurws_base","title":"<code>ceurws_base</code>","text":""},{"location":"#ceurspt.ceurws_base.Boolean","title":"<code>Boolean</code>","text":"<p>               Bases: <code>Bool</code></p> <p>A binary (true or false) value</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Boolean(Bool):\n    \"\"\"A binary (true or false) value\"\"\"\n\n    type_class_uri = XSD.boolean\n    type_class_curie = \"xsd:boolean\"\n    type_name = \"boolean\"\n    type_model_uri = CEURWSSCHEMA.Boolean\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Date","title":"<code>Date</code>","text":"<p>               Bases: <code>XSDDate</code></p> <p>a date (year, month and day) in an idealized calendar</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Date(XSDDate):\n    \"\"\"a date (year, month and day) in an idealized calendar\"\"\"\n\n    type_class_uri = XSD.date\n    type_class_curie = \"xsd:date\"\n    type_name = \"date\"\n    type_model_uri = CEURWSSCHEMA.Date\n</code></pre>"},{"location":"#ceurspt.ceurws_base.DateOrDatetime","title":"<code>DateOrDatetime</code>","text":"<p>               Bases: <code>str</code></p> <p>Either a date or a datetime</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class DateOrDatetime(str):\n    \"\"\"Either a date or a datetime\"\"\"\n\n    type_class_uri = LINKML.DateOrDatetime\n    type_class_curie = \"linkml:DateOrDatetime\"\n    type_name = \"date_or_datetime\"\n    type_model_uri = CEURWSSCHEMA.DateOrDatetime\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Datetime","title":"<code>Datetime</code>","text":"<p>               Bases: <code>XSDDateTime</code></p> <p>The combination of a date and time</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Datetime(XSDDateTime):\n    \"\"\"The combination of a date and time\"\"\"\n\n    type_class_uri = XSD.dateTime\n    type_class_curie = \"xsd:dateTime\"\n    type_name = \"datetime\"\n    type_model_uri = CEURWSSCHEMA.Datetime\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Double","title":"<code>Double</code>","text":"<p>               Bases: <code>float</code></p> <p>A real number that conforms to the xsd:double specification</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Double(float):\n    \"\"\"A real number that conforms to the xsd:double specification\"\"\"\n\n    type_class_uri = XSD.double\n    type_class_curie = \"xsd:double\"\n    type_name = \"double\"\n    type_model_uri = CEURWSSCHEMA.Double\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Float","title":"<code>Float</code>","text":"<p>               Bases: <code>float</code></p> <p>A real number that conforms to the xsd:float specification</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Float(float):\n    \"\"\"A real number that conforms to the xsd:float specification\"\"\"\n\n    type_class_uri = XSD.float\n    type_class_curie = \"xsd:float\"\n    type_name = \"float\"\n    type_model_uri = CEURWSSCHEMA.Float\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Integer","title":"<code>Integer</code>","text":"<p>               Bases: <code>int</code></p> <p>An integer</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Integer(int):\n    \"\"\"An integer\"\"\"\n\n    type_class_uri = XSD.integer\n    type_class_curie = \"xsd:integer\"\n    type_name = \"integer\"\n    type_model_uri = CEURWSSCHEMA.Integer\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Ncname","title":"<code>Ncname</code>","text":"<p>               Bases: <code>NCName</code></p> <p>Prefix part of CURIE</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Ncname(NCName):\n    \"\"\"Prefix part of CURIE\"\"\"\n\n    type_class_uri = XSD.string\n    type_class_curie = \"xsd:string\"\n    type_name = \"ncname\"\n    type_model_uri = CEURWSSCHEMA.Ncname\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Nodeidentifier","title":"<code>Nodeidentifier</code>","text":"<p>               Bases: <code>NodeIdentifier</code></p> <p>A URI, CURIE or BNODE that represents a node in a model.</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Nodeidentifier(NodeIdentifier):\n    \"\"\"A URI, CURIE or BNODE that represents a node in a model.\"\"\"\n\n    type_class_uri = SHEX.nonLiteral\n    type_class_curie = \"shex:nonLiteral\"\n    type_name = \"nodeidentifier\"\n    type_model_uri = CEURWSSCHEMA.Nodeidentifier\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Objectidentifier","title":"<code>Objectidentifier</code>","text":"<p>               Bases: <code>ElementIdentifier</code></p> <p>A URI or CURIE that represents an object in the model.</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Objectidentifier(ElementIdentifier):\n    \"\"\"A URI or CURIE that represents an object in the model.\"\"\"\n\n    type_class_uri = SHEX.iri\n    type_class_curie = \"shex:iri\"\n    type_name = \"objectidentifier\"\n    type_model_uri = CEURWSSCHEMA.Objectidentifier\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Paper","title":"<code>Paper</code>  <code>dataclass</code>","text":"<p>               Bases: <code>YAMLRoot</code></p> <p>A paper is e.g. a scholarly article</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>@dataclass\nclass Paper(YAMLRoot):\n    \"\"\"\n    A paper is e.g. a scholarly article\n    \"\"\"\n\n    _inherited_slots: ClassVar[List[str]] = []\n\n    class_class_uri: ClassVar[URIRef] = CEURWSSCHEMA.Paper\n    class_class_curie: ClassVar[str] = \"CeurwsSchema:Paper\"\n    class_name: ClassVar[str] = \"Paper\"\n    class_model_uri: ClassVar[URIRef] = CEURWSSCHEMA.Paper\n\n    description: Optional[str] = None\n    id: Optional[str] = None\n    wikidataid: Optional[str] = None\n    title: Optional[str] = None\n    pdfUrl: Optional[Union[str, URI]] = None\n    volume: Optional[Union[dict, Volume]] = None\n    session: Optional[Union[dict, Session]] = None\n\n    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):\n        if self.description is not None and not isinstance(self.description, str):\n            self.description = str(self.description)\n\n        if self.id is not None and not isinstance(self.id, str):\n            self.id = str(self.id)\n\n        if self.wikidataid is not None and not isinstance(self.wikidataid, str):\n            self.wikidataid = str(self.wikidataid)\n\n        if self.title is not None and not isinstance(self.title, str):\n            self.title = str(self.title)\n\n        if self.pdfUrl is not None and not isinstance(self.pdfUrl, URI):\n            self.pdfUrl = URI(self.pdfUrl)\n\n        if self.volume is not None and not isinstance(self.volume, Volume):\n            self.volume = Volume(**as_dict(self.volume))\n\n        if self.session is not None and not isinstance(self.session, Session):\n            self.session = Session(**as_dict(self.session))\n\n        super().__post_init__(**kwargs)\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Session","title":"<code>Session</code>  <code>dataclass</code>","text":"<p>               Bases: <code>YAMLRoot</code></p> <p>A Session is a a collection of papers as part of a Volume</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>@dataclass\nclass Session(YAMLRoot):\n    \"\"\"\n    A Session is a a collection of papers as part of a Volume\n    \"\"\"\n\n    _inherited_slots: ClassVar[List[str]] = []\n\n    class_class_uri: ClassVar[URIRef] = CEURWSSCHEMA.Session\n    class_class_curie: ClassVar[str] = \"CeurwsSchema:Session\"\n    class_name: ClassVar[str] = \"Session\"\n    class_model_uri: ClassVar[URIRef] = CEURWSSCHEMA.Session\n\n    title: Optional[str] = None\n    volume: Optional[Union[dict, Volume]] = None\n\n    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):\n        if self.title is not None and not isinstance(self.title, str):\n            self.title = str(self.title)\n\n        if self.volume is not None and not isinstance(self.volume, Volume):\n            self.volume = Volume(**as_dict(self.volume))\n\n        super().__post_init__(**kwargs)\n</code></pre>"},{"location":"#ceurspt.ceurws_base.String","title":"<code>String</code>","text":"<p>               Bases: <code>str</code></p> <p>A character string</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class String(str):\n    \"\"\"A character string\"\"\"\n\n    type_class_uri = XSD.string\n    type_class_curie = \"xsd:string\"\n    type_name = \"string\"\n    type_model_uri = CEURWSSCHEMA.String\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Time","title":"<code>Time</code>","text":"<p>               Bases: <code>XSDTime</code></p> <p>A time object represents a (local) time of day, independent of any particular day</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Time(XSDTime):\n    \"\"\"A time object represents a (local) time of day, independent of any particular day\"\"\"\n\n    type_class_uri = XSD.dateTime\n    type_class_curie = \"xsd:dateTime\"\n    type_name = \"time\"\n    type_model_uri = CEURWSSCHEMA.Time\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Uri","title":"<code>Uri</code>","text":"<p>               Bases: <code>URI</code></p> <p>a complete URI</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Uri(URI):\n    \"\"\"a complete URI\"\"\"\n\n    type_class_uri = XSD.anyURI\n    type_class_curie = \"xsd:anyURI\"\n    type_name = \"uri\"\n    type_model_uri = CEURWSSCHEMA.Uri\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Uriorcurie","title":"<code>Uriorcurie</code>","text":"<p>               Bases: <code>URIorCURIE</code></p> <p>a URI or a CURIE</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>class Uriorcurie(URIorCURIE):\n    \"\"\"a URI or a CURIE\"\"\"\n\n    type_class_uri = XSD.anyURI\n    type_class_curie = \"xsd:anyURI\"\n    type_name = \"uriorcurie\"\n    type_model_uri = CEURWSSCHEMA.Uriorcurie\n</code></pre>"},{"location":"#ceurspt.ceurws_base.Volume","title":"<code>Volume</code>  <code>dataclass</code>","text":"<p>               Bases: <code>YAMLRoot</code></p> <p>A Volume is a collection of papers mostly documenting the results of an academic event</p> Source code in <code>ceurspt/ceurws_base.py</code> <pre><code>@dataclass\nclass Volume(YAMLRoot):\n    \"\"\"\n    A Volume is a collection of papers mostly documenting the results of an academic event\n    \"\"\"\n\n    _inherited_slots: ClassVar[List[str]] = []\n\n    class_class_uri: ClassVar[URIRef] = CEURWSSCHEMA.Volume\n    class_class_curie: ClassVar[str] = \"CeurwsSchema:Volume\"\n    class_name: ClassVar[str] = \"Volume\"\n    class_model_uri: ClassVar[URIRef] = CEURWSSCHEMA.Volume\n\n    number: Optional[float] = None\n    acronym: Optional[str] = None\n    wikidataid: Optional[str] = None\n    title: Optional[str] = None\n    description: Optional[str] = None\n    url: Optional[str] = None\n    date: Optional[Union[str, XSDDate]] = None\n    dblp: Optional[str] = None\n    k10plus: Optional[str] = None\n    urn: Optional[str] = None\n\n    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):\n        if self.number is not None and not isinstance(self.number, float):\n            self.number = float(self.number)\n\n        if self.acronym is not None and not isinstance(self.acronym, str):\n            self.acronym = str(self.acronym)\n\n        if self.wikidataid is not None and not isinstance(self.wikidataid, str):\n            self.wikidataid = str(self.wikidataid)\n\n        if self.title is not None and not isinstance(self.title, str):\n            self.title = str(self.title)\n\n        if self.description is not None and not isinstance(self.description, str):\n            self.description = str(self.description)\n\n        if self.url is not None and not isinstance(self.url, str):\n            self.url = str(self.url)\n\n        if self.date is not None and not isinstance(self.date, XSDDate):\n            self.date = XSDDate(self.date)\n\n        if self.dblp is not None and not isinstance(self.dblp, str):\n            self.dblp = str(self.dblp)\n\n        if self.k10plus is not None and not isinstance(self.k10plus, str):\n            self.k10plus = str(self.k10plus)\n\n        if self.urn is not None and not isinstance(self.urn, str):\n            self.urn = str(self.urn)\n\n        super().__post_init__(**kwargs)\n</code></pre>"},{"location":"#ceurspt.dataclass_util","title":"<code>dataclass_util</code>","text":"<p>Created on 30.03.2023</p> <p>@author: wf</p>"},{"location":"#ceurspt.dataclass_util.DataClassUtil","title":"<code>DataClassUtil</code>","text":"<p>https://gist.github.com/gatopeich/1efd3e1e4269e1e98fae9983bb914f22</p> <p>https://stackoverflow.com/a/54769644/1497139</p> Source code in <code>ceurspt/dataclass_util.py</code> <pre><code>class DataClassUtil:\n    \"\"\"\n    https://gist.github.com/gatopeich/1efd3e1e4269e1e98fae9983bb914f22\n\n    https://stackoverflow.com/a/54769644/1497139\n    \"\"\"\n\n    @classmethod\n    def dataclass_from_dict(cls, klass, d):\n        try:\n            fieldtypes = {f.name: f.type for f in dataclasses.fields(klass)}\n            return klass(**{f: cls.dataclass_from_dict(fieldtypes[f], d[f]) for f in d})\n        except:\n            return d  # Not a dataclass field\n</code></pre>"},{"location":"#ceurspt.profiler","title":"<code>profiler</code>","text":"<p>Created on 27.03.2023</p> <p>@author: wf</p>"},{"location":"#ceurspt.profiler.Profiler","title":"<code>Profiler</code>","text":"<p>simple profiler</p> Source code in <code>ceurspt/profiler.py</code> <pre><code>class Profiler:\n    \"\"\"\n    simple profiler\n    \"\"\"\n\n    def __init__(self, msg, profile=True):\n        \"\"\"\n        construct me with the given msg and profile active flag\n\n        Args:\n            msg(str): the message to show if profiling is active\n            profile(bool): True if messages should be shown\n        \"\"\"\n        self.msg = msg\n        self.profile = profile\n        self.starttime = time.time()\n        if profile:\n            print(f\"Starting {msg} ...\", flush=True)\n\n    def time(self, extraMsg=\"\"):\n        \"\"\"\n        time the action and print if profile is active\n        \"\"\"\n        elapsed = time.time() - self.starttime\n        if self.profile:\n            print(f\"{self.msg}{extraMsg} took {elapsed:5.1f} s\", flush=True)\n        return elapsed\n</code></pre>"},{"location":"#ceurspt.profiler.Profiler.__init__","title":"<code>__init__(msg, profile=True)</code>","text":"<p>construct me with the given msg and profile active flag</p> <p>Parameters:</p> Name Type Description Default <code>msg(str)</code> <p>the message to show if profiling is active</p> required <code>profile(bool)</code> <p>True if messages should be shown</p> required Source code in <code>ceurspt/profiler.py</code> <pre><code>def __init__(self, msg, profile=True):\n    \"\"\"\n    construct me with the given msg and profile active flag\n\n    Args:\n        msg(str): the message to show if profiling is active\n        profile(bool): True if messages should be shown\n    \"\"\"\n    self.msg = msg\n    self.profile = profile\n    self.starttime = time.time()\n    if profile:\n        print(f\"Starting {msg} ...\", flush=True)\n</code></pre>"},{"location":"#ceurspt.profiler.Profiler.time","title":"<code>time(extraMsg='')</code>","text":"<p>time the action and print if profile is active</p> Source code in <code>ceurspt/profiler.py</code> <pre><code>def time(self, extraMsg=\"\"):\n    \"\"\"\n    time the action and print if profile is active\n    \"\"\"\n    elapsed = time.time() - self.starttime\n    if self.profile:\n        print(f\"{self.msg}{extraMsg} took {elapsed:5.1f} s\", flush=True)\n    return elapsed\n</code></pre>"},{"location":"#ceurspt.spt_cmd","title":"<code>spt_cmd</code>","text":"<p>Created on 2023-03-17</p> <p>@author: wf</p>"},{"location":"#ceurspt.spt_cmd.CeurSptCmd","title":"<code>CeurSptCmd</code>","text":"<p>command line interface for CEUR Single Point of Truth</p> Source code in <code>ceurspt/spt_cmd.py</code> <pre><code>class CeurSptCmd:\n    \"\"\"\n    command line interface for CEUR Single Point of Truth\n    \"\"\"\n\n    def get_arg_parser(self, description: str, version_msg) -&gt; ArgumentParser:\n        \"\"\"\n        Setup command line argument parser\n\n        Args:\n            description(str): the description\n            version_msg(str): the version message\n\n        Returns:\n            ArgumentParser: the argument parser\n        \"\"\"\n        script_path = Path(__file__)\n        base_path = f\"{script_path.parent.parent}/ceur-ws\"\n        base_url = \"http://cvb.bitplan.com\"\n        parser = ArgumentParser(\n            description=description, formatter_class=RawDescriptionHelpFormatter\n        )\n        parser.add_argument(\n            \"-a\",\n            \"--about\",\n            help=\"show about info [default: %(default)s]\",\n            action=\"store_true\",\n        )\n        parser.add_argument(\n            \"-b\",\n            \"--basepath\",\n            help=\"the base path to the ceur-ws volumes [default: %(default)s]\",\n            default=base_path,\n        )\n        parser.add_argument(\n            \"-bu\",\n            \"--baseurl\",\n            help=\"the base url to use for the RESTFul metadata service [default: %(default)s]\",\n            default=base_url,\n        )\n        parser.add_argument(\n            \"-d\",\n            \"--debug\",\n            dest=\"debug\",\n            action=\"store_true\",\n            help=\"show debug info [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"-rc\",\n            \"--recreate\",\n            action=\"store_true\",\n            help=\"reload caches e.g. volume table\",\n        )\n\n        parser.add_argument(\n            \"-v\",\n            \"--verbose\",\n            action=\"store_true\",\n            help=\"show verbose infos e.g. on startup [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--host\",\n            default=self.get_default_host(),\n            help=\"the host to serve / listen from [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--port\",\n            type=int,\n            default=9990,\n            help=\"the port to serve from [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"-s\",\n            \"--serve\",\n            action=\"store_true\",\n            help=\"start webserver [default: %(default)s]\",\n        )\n        parser.add_argument(\"-V\", \"--version\", action=\"version\", version=version_msg)\n        return parser\n\n    def get_default_host(self) -&gt; str:\n        \"\"\"\n        get the default host as the fully qualifying hostname\n        of the computer the server runs on\n\n        Returns:\n            str: the hostname\n        \"\"\"\n        host = socket.getfqdn()\n        # work around https://github.com/python/cpython/issues/79345\n        if (\n            host\n            == \"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa\"\n        ):\n            host = \"localhost\"  # host=\"127.0.0.1\"\n        return host\n\n    def recreate(self, args: Namespace):\n        \"\"\"\n        recreate the caches\n\n        Args:\n            args(Arguments): command line arguments\n        \"\"\"\n        jcm = JsonCacheManager(base_url=args.baseurl)\n        for lod_name in [\n            \"volumes\",\n            \"papers\",\n            \"proceedings\",\n            \"authors_dblp\",\n            \"papers_dblp\",\n        ]:\n            profiler = Profiler(f\"read {lod_name} ...\", profile=True)\n            lod = jcm.load_lod(lod_name)\n            _elapsed = profiler.time(f\" read {len(lod)} {lod_name}\")\n            jcm.store(lod_name, lod)\n            profiler = Profiler(f\"store {lod_name} ...\", profile=True)\n            _elapsed = profiler.time(f\" store {len(lod)} {lod_name}\")\n\n    def start(self, args: Namespace):\n        \"\"\"\n        Args:\n            args(Arguments): command line arguments\n        \"\"\"\n        vm = VolumeManager(base_path=args.basepath, base_url=args.baseurl)\n        vm.getVolumes(args.verbose)\n        pm = PaperManager(base_url=args.baseurl)\n        pm.getPapers(vm, args.verbose)\n        ws = WebServer(vm, pm)\n        uvicorn.run(ws.app, host=args.host, port=args.port)\n</code></pre>"},{"location":"#ceurspt.spt_cmd.CeurSptCmd.get_arg_parser","title":"<code>get_arg_parser(description, version_msg)</code>","text":"<p>Setup command line argument parser</p> <p>Parameters:</p> Name Type Description Default <code>description(str)</code> <p>the description</p> required <code>version_msg(str)</code> <p>the version message</p> required <p>Returns:</p> Name Type Description <code>ArgumentParser</code> <code>ArgumentParser</code> <p>the argument parser</p> Source code in <code>ceurspt/spt_cmd.py</code> <pre><code>def get_arg_parser(self, description: str, version_msg) -&gt; ArgumentParser:\n    \"\"\"\n    Setup command line argument parser\n\n    Args:\n        description(str): the description\n        version_msg(str): the version message\n\n    Returns:\n        ArgumentParser: the argument parser\n    \"\"\"\n    script_path = Path(__file__)\n    base_path = f\"{script_path.parent.parent}/ceur-ws\"\n    base_url = \"http://cvb.bitplan.com\"\n    parser = ArgumentParser(\n        description=description, formatter_class=RawDescriptionHelpFormatter\n    )\n    parser.add_argument(\n        \"-a\",\n        \"--about\",\n        help=\"show about info [default: %(default)s]\",\n        action=\"store_true\",\n    )\n    parser.add_argument(\n        \"-b\",\n        \"--basepath\",\n        help=\"the base path to the ceur-ws volumes [default: %(default)s]\",\n        default=base_path,\n    )\n    parser.add_argument(\n        \"-bu\",\n        \"--baseurl\",\n        help=\"the base url to use for the RESTFul metadata service [default: %(default)s]\",\n        default=base_url,\n    )\n    parser.add_argument(\n        \"-d\",\n        \"--debug\",\n        dest=\"debug\",\n        action=\"store_true\",\n        help=\"show debug info [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"-rc\",\n        \"--recreate\",\n        action=\"store_true\",\n        help=\"reload caches e.g. volume table\",\n    )\n\n    parser.add_argument(\n        \"-v\",\n        \"--verbose\",\n        action=\"store_true\",\n        help=\"show verbose infos e.g. on startup [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--host\",\n        default=self.get_default_host(),\n        help=\"the host to serve / listen from [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--port\",\n        type=int,\n        default=9990,\n        help=\"the port to serve from [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"-s\",\n        \"--serve\",\n        action=\"store_true\",\n        help=\"start webserver [default: %(default)s]\",\n    )\n    parser.add_argument(\"-V\", \"--version\", action=\"version\", version=version_msg)\n    return parser\n</code></pre>"},{"location":"#ceurspt.spt_cmd.CeurSptCmd.get_default_host","title":"<code>get_default_host()</code>","text":"<p>get the default host as the fully qualifying hostname of the computer the server runs on</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the hostname</p> Source code in <code>ceurspt/spt_cmd.py</code> <pre><code>def get_default_host(self) -&gt; str:\n    \"\"\"\n    get the default host as the fully qualifying hostname\n    of the computer the server runs on\n\n    Returns:\n        str: the hostname\n    \"\"\"\n    host = socket.getfqdn()\n    # work around https://github.com/python/cpython/issues/79345\n    if (\n        host\n        == \"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa\"\n    ):\n        host = \"localhost\"  # host=\"127.0.0.1\"\n    return host\n</code></pre>"},{"location":"#ceurspt.spt_cmd.CeurSptCmd.recreate","title":"<code>recreate(args)</code>","text":"<p>recreate the caches</p> <p>Parameters:</p> Name Type Description Default <code>args(Arguments)</code> <p>command line arguments</p> required Source code in <code>ceurspt/spt_cmd.py</code> <pre><code>def recreate(self, args: Namespace):\n    \"\"\"\n    recreate the caches\n\n    Args:\n        args(Arguments): command line arguments\n    \"\"\"\n    jcm = JsonCacheManager(base_url=args.baseurl)\n    for lod_name in [\n        \"volumes\",\n        \"papers\",\n        \"proceedings\",\n        \"authors_dblp\",\n        \"papers_dblp\",\n    ]:\n        profiler = Profiler(f\"read {lod_name} ...\", profile=True)\n        lod = jcm.load_lod(lod_name)\n        _elapsed = profiler.time(f\" read {len(lod)} {lod_name}\")\n        jcm.store(lod_name, lod)\n        profiler = Profiler(f\"store {lod_name} ...\", profile=True)\n        _elapsed = profiler.time(f\" store {len(lod)} {lod_name}\")\n</code></pre>"},{"location":"#ceurspt.spt_cmd.CeurSptCmd.start","title":"<code>start(args)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>args(Arguments)</code> <p>command line arguments</p> required Source code in <code>ceurspt/spt_cmd.py</code> <pre><code>def start(self, args: Namespace):\n    \"\"\"\n    Args:\n        args(Arguments): command line arguments\n    \"\"\"\n    vm = VolumeManager(base_path=args.basepath, base_url=args.baseurl)\n    vm.getVolumes(args.verbose)\n    pm = PaperManager(base_url=args.baseurl)\n    pm.getPapers(vm, args.verbose)\n    ws = WebServer(vm, pm)\n    uvicorn.run(ws.app, host=args.host, port=args.port)\n</code></pre>"},{"location":"#ceurspt.spt_cmd.main","title":"<code>main(argv=None)</code>","text":"<p>main program.</p> Source code in <code>ceurspt/spt_cmd.py</code> <pre><code>def main(argv=None):  # IGNORE:C0111\n    \"\"\"main program.\"\"\"\n\n    if argv is None:\n        argv = sys.argv[1:]\n\n    program_name = \"ceurspt\"\n    program_version = f\"v{Version.version}\"\n    program_build_date = str(Version.date)\n    program_version_message = f\"{program_name} ({program_version},{program_build_date})\"\n\n    args = None\n    try:\n        spt_cmd = CeurSptCmd()\n        parser = spt_cmd.get_arg_parser(\n            description=Version.license, version_msg=program_version_message\n        )\n        args = parser.parse_args(argv)\n        if len(argv) &lt; 1:\n            parser.print_usage()\n            sys.exit(1)\n        if args.about:\n            print(program_version_message)\n            print(f\"see {Version.doc_url}\")\n            webbrowser.open(Version.doc_url)\n        if args.recreate:\n            spt_cmd.recreate(args)\n        elif args.serve:\n            spt_cmd.start(args)\n\n    except KeyboardInterrupt:\n        ###\n        # handle keyboard interrupt\n        # ###\n        return 1\n    except Exception as e:\n        if DEBUG:\n            raise e\n        indent = len(program_name) * \" \"\n        sys.stderr.write(program_name + \": \" + repr(e) + \"\\n\")\n        sys.stderr.write(indent + \"  for help use --help\")\n        if args is None:\n            print(\"args could not be parsed\")\n        elif args.debug:\n            print(traceback.format_exc())\n        return 2\n</code></pre>"},{"location":"#ceurspt.version","title":"<code>version</code>","text":"<p>Created on 2022-09-11</p> <p>@author: wf</p>"},{"location":"#ceurspt.version.Version","title":"<code>Version</code>","text":"<p>               Bases: <code>object</code></p> <p>Version handling for VolumeBrowser</p> Source code in <code>ceurspt/version.py</code> <pre><code>class Version(object):\n    \"\"\"\n    Version handling for VolumeBrowser\n    \"\"\"\n\n    name = \"\"\n    version = ceurspt.__version__\n    date = \"2023-03-17\"\n    updated = \"2023-12-29\"\n    description = (\"CEUR-WS Single Point of Truth RestFUL server\",)\n\n    authors = \"Tim Holzheim, Wolfgang Fahl\"\n\n    doc_url = \"https://github.com/ceurws/ceur-spt\"\n    chat_url = \"https://github.com/ceurws/ceur-spt/discussions\"\n    cm_url = \"https://github.com/ceurws/ceur-spt\"\n\n    license = f\"\"\"Copyright 2023 contributors. All rights reserved.\n\n  Licensed under the Apache License 2.0\n  https://www.apache.org/licenses/LICENSE-2.0\n\n  Distributed on an \"AS IS\" basis without warranties\n  or conditions of any kind, either express or implied.\"\"\"\n    longDescription = f\"\"\"{name} version {version}\n{description}\n\n  Created by {authors} on {date} last updated {updated}\"\"\"\n</code></pre>"},{"location":"#ceurspt.webserver","title":"<code>webserver</code>","text":"<p>Created on 2023-03-17</p> <p>@author: wf</p>"},{"location":"#ceurspt.webserver.WebServer","title":"<code>WebServer</code>","text":"<p>the webserver</p> Source code in <code>ceurspt/webserver.py</code> <pre><code>class WebServer:\n    \"\"\"\n    the webserver\n    \"\"\"\n\n    def __init__(\n        self, vm: VolumeManager, pm: PaperManager, static_directory: str = \"static\"\n    ):\n        \"\"\"\n        constructor\n\n        Args:\n            vm(VolumeManager): the volume manager to use\n            pm(PaperManager): the paper manager to use\n            static_directory(str): the directory for static html files to use\n        \"\"\"\n        self.app = FastAPI()\n        # https://fastapi.tiangolo.com/tutorial/static-files/\n        self.app.mount(\n            \"/static\", StaticFiles(directory=static_directory), name=\"static\"\n        )\n        self.vm = vm\n        self.pm = pm\n\n        @self.app.get(\"/index.html/{upper:int}/{lower:int}\")\n        async def index_html(upper: Optional[int], lower: Optional[int]):\n            content = self.vm.index_html(upper=upper, lower=lower)\n            return HTMLResponse(content)\n\n        @self.app.get(\"/index.html\")\n        async def full_index_html():\n            return await index_html(upper=None, lower=None)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name:str}.pdf\")\n        async def paperPdf(number: int, pdf_name: str):\n            \"\"\"\n            get the PDF for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            pdf = paper.getPdf()\n            return FileResponse(pdf)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.json\")\n        async def paperJson(number: int, pdf_name: str):\n            \"\"\"\n            get the json response for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            paper_dict = paper.getMergedDict()\n            return paper_dict\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.wbjson\")\n        async def paperWikibaseCliJson(number: int, pdf_name: str):\n            \"\"\"\n            get the json response to the wikibase-cli for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            paper_dict = paper.as_wb_dict()\n            return paper_dict\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}/{qid}.wbcli\")\n        async def paperWikibaseCli(number: int, pdf_name, qid: str):\n            \"\"\"\n            get the json response to the wikibase-cli for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            paper_cli_text = paper.as_wbi_cli_text(qid)\n            return PlainTextResponse(paper_cli_text)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.html\")\n        async def paperHtml(number: int, pdf_name: str):\n            \"\"\"\n            get the html response for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            content = paper.asHtml()\n            return HTMLResponse(content=content)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.txt\")\n        async def paperText(number: int, pdf_name: str):\n            \"\"\"\n            get the text for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            text = paper.getText()\n            return PlainTextResponse(text)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.smw\")\n        async def paperSMW(number: int, pdf_name: str):\n            \"\"\"\n            Get semantic media wiki markup of the given paper\"\"\"\n            paper = self.getPaper(number, pdf_name)\n            if paper:\n                markup = paper.as_smw_markup()\n            else:\n                markup = f\"\"\"{{{{Paper\n|id=Vol-{number}/{pdf_name}\n|volume=Vol-{number}\n}}}}\"\"\"\n            return PlainTextResponse(markup)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.qs\")\n        async def paperQuickStatementns(number: int, pdf_name: str):\n            \"\"\"\n            get the quickstatements for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            qs = paper.as_quickstatements()\n            return PlainTextResponse(qs)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.grobid\")\n        async def paperGrobidXml(number: int, pdf_name: str):\n            \"\"\"\n            get the grobid XML for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            xml = paper.getContentByPostfix(\".tei.xml\")\n            return Response(content=xml, media_type=\"application/xml\")\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.cermine\")\n        async def paperCermineXml(number: int, pdf_name: str):\n            \"\"\"\n            get the grobid XML for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            xml = paper.getContentByPostfix(\".cermine.xml\")\n            return Response(content=xml, media_type=\"application/xml\")\n\n        @self.app.get(\"/Vol-{number:int}.smw\")\n        async def volumeSMW(number: int):\n            \"\"\"\n            Get semantic media wiki markup of volume by given id\n            \"\"\"\n            vol = self.getVolume(number)\n            if vol:\n                markup = vol.as_smw_markup()\n            else:\n                markup = f\"{{{{Volume|number={number}}}}}\"\n            return PlainTextResponse(markup)\n\n        @self.app.get(\"/Vol-{number:int}.json\")\n        async def volumeJson(number: int):\n            \"\"\"\n            Get metadata of volume by given id\n            \"\"\"\n            vol = self.getVolume(number)\n            if vol:\n                return vol.getMergedDict()\n            else:\n                return {\"error\": f\"unknown volume number {number}\"}\n\n        @self.app.get(\"/Vol-{number:int}\")\n        async def volumeHtmlWithPdf(number: int):\n            \"\"\"\n            get html Response for the given volume by number\n            displaying pdfs directly\n            \"\"\"\n            return self.volumeHtml(number, ext=\".pdf\")\n\n        @self.app.get(\"/Vol-{number:int}.html\")\n        async def volumeHtmlWithHtml(number: int):\n            \"\"\"\n            get html Response for the given volume by number\n            displaying pdfs embedded in html\n            \"\"\"\n            return self.volumeHtml(number, ext=\".html\")\n\n        @self.app.get(\"/\")\n        async def home():\n            \"\"\"\n            Return the home\n            \"\"\"\n            url = \"https://github.com/ceurws/ceur-spt\"\n            response = RedirectResponse(url=url, status_code=302)\n            return response\n\n        @self.app.get(\"/volume/{number:int}\", tags=[\"json\"])\n        async def volume_citation(number: int):\n            \"\"\"\n            Get volume record\n            \"\"\"\n            vol = self.getVolume(number)\n            if vol:\n                record = vol.getMergedDict()\n                return record\n            else:\n                return {\"error\": f\"unknown volume number {number}\"}\n\n        @self.app.get(\"/volume/{number:int}/paper\", tags=[\"json\"])\n        async def volume_citation_paper_by_number(number: int):\n            \"\"\"\n            Get volume papers\n            \"\"\"\n            vol = self.getVolume(number)\n            if vol:\n                paper_records = []\n                for paper in vol.papers:\n                    paper_records.append(paper.getMergedDict())\n                return paper_records\n            else:\n                return {\"error\": f\"unknown volume number {number}\"}\n\n        @self.app.get(\"/volume/{number:int}/citation\", tags=[\"citation\"])\n        async def volume_citation_citation(number: int):\n            \"\"\"\n            Get volume citation\n            \"\"\"\n            vol = self.getVolume(number)\n            if vol:\n                citation = BibTexConverter.convert_volume(vol)\n                return PlainTextResponse(content=citation)\n            else:\n                return {\"error\": f\"unknown volume number {number}\"}\n\n        @self.app.get(\"/volume/{number:int}/paper/{pdf_name:str}\", tags=[\"json\"])\n        async def volume_citation_paper_by_name(number: int, pdf_name: str):\n            \"\"\"\n            Get paper citation\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            if paper:\n                record = paper.getMergedDict()\n                return record\n            else:\n                return {\"error\": f\"unknown volume number {number} or paper {pdf_name}\"}\n\n        @self.app.get(\n            \"/volume/{number:int}/paper/{pdf_name:str}/citation\", tags=[\"citation\"]\n        )\n        async def volume_paper_citation(number: int, pdf_name: str):\n            \"\"\"\n            Get paper citation\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            if paper:\n                citation = BibTexConverter.convert_paper(paper)\n                return PlainTextResponse(content=citation)\n            else:\n                return {\"error\": f\"unknown volume number {number} or paper {pdf_name}\"}\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.yaml\")\n        async def paperYaml(number: int, pdf_name: str):\n            paper = self.getPaper(number, pdf_name)\n            paper_dict = paper.getMergedDict()\n            yaml_content = yaml.dump(paper_dict)\n            return Response(content=yaml_content, media_type=\"application/x-yaml\")\n\n        @self.app.get(\"/Vol-{number:int}.yaml\")\n        async def volumeYaml(number: int):\n            vol = self.getVolume(number)\n            if vol:\n                volume_dict = vol.getMergedDict()\n            else:\n                volume_dict = {\"error\": f\"unknown volume number {number}\"}\n            yaml_content = yaml.dump(volume_dict)\n            return Response(content=yaml_content, media_type=\"application/x-yaml\")\n\n        @self.app.get(\"/volume/{number:int}/paper.yaml\", tags=[\"yaml\"])\n        async def volume_papers_yaml(number: int):\n            vol = self.getVolume(number)\n            if vol:\n                paper_records = [paper.getMergedDict() for paper in vol.papers]\n            else:\n                paper_records = {\"error\": f\"unknown volume number {number}\"}\n            yaml_content = yaml.dump(paper_records)\n            return Response(content=yaml_content, media_type=\"application/x-yaml\")\n\n        @self.app.get(\"/volume/{number:int}/paper/{pdf_name:str}.yaml\", tags=[\"yaml\"])\n        async def volume_paper_yaml(number: int, pdf_name: str):\n            paper = self.getPaper(number, pdf_name)\n            if paper:\n                paper_dict = paper.getMergedDict()\n            else:\n                paper_dict = {\n                    \"error\": f\"unknown volume number {number} or paper {pdf_name}\"\n                }\n            yaml_content = yaml.dump(paper_dict)\n            return Response(content=yaml_content, media_type=\"application/x-yaml\")\n\n    def volumeHtml(self, number: int, ext: str = \".pdf\") -&gt; HTMLResponse:\n        \"\"\"\n        get html Response for the given volume by number\n        Args:\n            number: volume number\n            ext: file extension\n        \"\"\"\n        vol = self.getVolume(number)\n        if vol:\n            content = vol.getHtml(ext=ext, fixLinks=True)\n            return HTMLResponse(content=content, status_code=200)\n        else:\n            content = vol.get_empty_volume_page()\n            return HTMLResponse(content=content, status_code=200)\n\n    def getVolume(self, number: int) -&gt; Volume:\n        \"\"\"\n        get the volume for the given number\n\n        Args:\n            number(int): the number of the volume to fetch\n\n        Returns:\n            Volume: the volume or None if the volume number is not known\n        \"\"\"\n        vol = self.vm.getVolume(number)\n        return vol\n\n    def getPaper(\n        self, number: int, pdf_name: str, exceptionOnFail: bool = True\n    ) -&gt; Paper:\n        \"\"\"\n        get the paper for the given volume number and pdf_name\n\n        Args:\n            number(int): the number of the volume the paper is part of\n            pdf_name(str): the pdf name of the paper\n            exceptionOnFail(bool): if True raise an exception on failure\n\n        Returns:\n            Paper: the paper or None if the paper is not found\n        \"\"\"\n        paper = self.pm.getPaper(number, pdf_name)\n        if paper is None and exceptionOnFail:\n            raise HTTPException(\n                status_code=404, detail=f\"paper Vol-{number}/{pdf_name}.pdf not found\"\n            )\n        return paper\n</code></pre>"},{"location":"#ceurspt.webserver.WebServer.__init__","title":"<code>__init__(vm, pm, static_directory='static')</code>","text":"<p>constructor</p> <p>Parameters:</p> Name Type Description Default <code>vm(VolumeManager)</code> <p>the volume manager to use</p> required <code>pm(PaperManager)</code> <p>the paper manager to use</p> required <code>static_directory(str)</code> <p>the directory for static html files to use</p> required Source code in <code>ceurspt/webserver.py</code> <pre><code>    def __init__(\n        self, vm: VolumeManager, pm: PaperManager, static_directory: str = \"static\"\n    ):\n        \"\"\"\n        constructor\n\n        Args:\n            vm(VolumeManager): the volume manager to use\n            pm(PaperManager): the paper manager to use\n            static_directory(str): the directory for static html files to use\n        \"\"\"\n        self.app = FastAPI()\n        # https://fastapi.tiangolo.com/tutorial/static-files/\n        self.app.mount(\n            \"/static\", StaticFiles(directory=static_directory), name=\"static\"\n        )\n        self.vm = vm\n        self.pm = pm\n\n        @self.app.get(\"/index.html/{upper:int}/{lower:int}\")\n        async def index_html(upper: Optional[int], lower: Optional[int]):\n            content = self.vm.index_html(upper=upper, lower=lower)\n            return HTMLResponse(content)\n\n        @self.app.get(\"/index.html\")\n        async def full_index_html():\n            return await index_html(upper=None, lower=None)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name:str}.pdf\")\n        async def paperPdf(number: int, pdf_name: str):\n            \"\"\"\n            get the PDF for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            pdf = paper.getPdf()\n            return FileResponse(pdf)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.json\")\n        async def paperJson(number: int, pdf_name: str):\n            \"\"\"\n            get the json response for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            paper_dict = paper.getMergedDict()\n            return paper_dict\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.wbjson\")\n        async def paperWikibaseCliJson(number: int, pdf_name: str):\n            \"\"\"\n            get the json response to the wikibase-cli for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            paper_dict = paper.as_wb_dict()\n            return paper_dict\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}/{qid}.wbcli\")\n        async def paperWikibaseCli(number: int, pdf_name, qid: str):\n            \"\"\"\n            get the json response to the wikibase-cli for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            paper_cli_text = paper.as_wbi_cli_text(qid)\n            return PlainTextResponse(paper_cli_text)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.html\")\n        async def paperHtml(number: int, pdf_name: str):\n            \"\"\"\n            get the html response for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            content = paper.asHtml()\n            return HTMLResponse(content=content)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.txt\")\n        async def paperText(number: int, pdf_name: str):\n            \"\"\"\n            get the text for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            text = paper.getText()\n            return PlainTextResponse(text)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.smw\")\n        async def paperSMW(number: int, pdf_name: str):\n            \"\"\"\n            Get semantic media wiki markup of the given paper\"\"\"\n            paper = self.getPaper(number, pdf_name)\n            if paper:\n                markup = paper.as_smw_markup()\n            else:\n                markup = f\"\"\"{{{{Paper\n|id=Vol-{number}/{pdf_name}\n|volume=Vol-{number}\n}}}}\"\"\"\n            return PlainTextResponse(markup)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.qs\")\n        async def paperQuickStatementns(number: int, pdf_name: str):\n            \"\"\"\n            get the quickstatements for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            qs = paper.as_quickstatements()\n            return PlainTextResponse(qs)\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.grobid\")\n        async def paperGrobidXml(number: int, pdf_name: str):\n            \"\"\"\n            get the grobid XML for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            xml = paper.getContentByPostfix(\".tei.xml\")\n            return Response(content=xml, media_type=\"application/xml\")\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.cermine\")\n        async def paperCermineXml(number: int, pdf_name: str):\n            \"\"\"\n            get the grobid XML for the given paper\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            xml = paper.getContentByPostfix(\".cermine.xml\")\n            return Response(content=xml, media_type=\"application/xml\")\n\n        @self.app.get(\"/Vol-{number:int}.smw\")\n        async def volumeSMW(number: int):\n            \"\"\"\n            Get semantic media wiki markup of volume by given id\n            \"\"\"\n            vol = self.getVolume(number)\n            if vol:\n                markup = vol.as_smw_markup()\n            else:\n                markup = f\"{{{{Volume|number={number}}}}}\"\n            return PlainTextResponse(markup)\n\n        @self.app.get(\"/Vol-{number:int}.json\")\n        async def volumeJson(number: int):\n            \"\"\"\n            Get metadata of volume by given id\n            \"\"\"\n            vol = self.getVolume(number)\n            if vol:\n                return vol.getMergedDict()\n            else:\n                return {\"error\": f\"unknown volume number {number}\"}\n\n        @self.app.get(\"/Vol-{number:int}\")\n        async def volumeHtmlWithPdf(number: int):\n            \"\"\"\n            get html Response for the given volume by number\n            displaying pdfs directly\n            \"\"\"\n            return self.volumeHtml(number, ext=\".pdf\")\n\n        @self.app.get(\"/Vol-{number:int}.html\")\n        async def volumeHtmlWithHtml(number: int):\n            \"\"\"\n            get html Response for the given volume by number\n            displaying pdfs embedded in html\n            \"\"\"\n            return self.volumeHtml(number, ext=\".html\")\n\n        @self.app.get(\"/\")\n        async def home():\n            \"\"\"\n            Return the home\n            \"\"\"\n            url = \"https://github.com/ceurws/ceur-spt\"\n            response = RedirectResponse(url=url, status_code=302)\n            return response\n\n        @self.app.get(\"/volume/{number:int}\", tags=[\"json\"])\n        async def volume_citation(number: int):\n            \"\"\"\n            Get volume record\n            \"\"\"\n            vol = self.getVolume(number)\n            if vol:\n                record = vol.getMergedDict()\n                return record\n            else:\n                return {\"error\": f\"unknown volume number {number}\"}\n\n        @self.app.get(\"/volume/{number:int}/paper\", tags=[\"json\"])\n        async def volume_citation_paper_by_number(number: int):\n            \"\"\"\n            Get volume papers\n            \"\"\"\n            vol = self.getVolume(number)\n            if vol:\n                paper_records = []\n                for paper in vol.papers:\n                    paper_records.append(paper.getMergedDict())\n                return paper_records\n            else:\n                return {\"error\": f\"unknown volume number {number}\"}\n\n        @self.app.get(\"/volume/{number:int}/citation\", tags=[\"citation\"])\n        async def volume_citation_citation(number: int):\n            \"\"\"\n            Get volume citation\n            \"\"\"\n            vol = self.getVolume(number)\n            if vol:\n                citation = BibTexConverter.convert_volume(vol)\n                return PlainTextResponse(content=citation)\n            else:\n                return {\"error\": f\"unknown volume number {number}\"}\n\n        @self.app.get(\"/volume/{number:int}/paper/{pdf_name:str}\", tags=[\"json\"])\n        async def volume_citation_paper_by_name(number: int, pdf_name: str):\n            \"\"\"\n            Get paper citation\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            if paper:\n                record = paper.getMergedDict()\n                return record\n            else:\n                return {\"error\": f\"unknown volume number {number} or paper {pdf_name}\"}\n\n        @self.app.get(\n            \"/volume/{number:int}/paper/{pdf_name:str}/citation\", tags=[\"citation\"]\n        )\n        async def volume_paper_citation(number: int, pdf_name: str):\n            \"\"\"\n            Get paper citation\n            \"\"\"\n            paper = self.getPaper(number, pdf_name)\n            if paper:\n                citation = BibTexConverter.convert_paper(paper)\n                return PlainTextResponse(content=citation)\n            else:\n                return {\"error\": f\"unknown volume number {number} or paper {pdf_name}\"}\n\n        @self.app.get(\"/Vol-{number:int}/{pdf_name}.yaml\")\n        async def paperYaml(number: int, pdf_name: str):\n            paper = self.getPaper(number, pdf_name)\n            paper_dict = paper.getMergedDict()\n            yaml_content = yaml.dump(paper_dict)\n            return Response(content=yaml_content, media_type=\"application/x-yaml\")\n\n        @self.app.get(\"/Vol-{number:int}.yaml\")\n        async def volumeYaml(number: int):\n            vol = self.getVolume(number)\n            if vol:\n                volume_dict = vol.getMergedDict()\n            else:\n                volume_dict = {\"error\": f\"unknown volume number {number}\"}\n            yaml_content = yaml.dump(volume_dict)\n            return Response(content=yaml_content, media_type=\"application/x-yaml\")\n\n        @self.app.get(\"/volume/{number:int}/paper.yaml\", tags=[\"yaml\"])\n        async def volume_papers_yaml(number: int):\n            vol = self.getVolume(number)\n            if vol:\n                paper_records = [paper.getMergedDict() for paper in vol.papers]\n            else:\n                paper_records = {\"error\": f\"unknown volume number {number}\"}\n            yaml_content = yaml.dump(paper_records)\n            return Response(content=yaml_content, media_type=\"application/x-yaml\")\n\n        @self.app.get(\"/volume/{number:int}/paper/{pdf_name:str}.yaml\", tags=[\"yaml\"])\n        async def volume_paper_yaml(number: int, pdf_name: str):\n            paper = self.getPaper(number, pdf_name)\n            if paper:\n                paper_dict = paper.getMergedDict()\n            else:\n                paper_dict = {\n                    \"error\": f\"unknown volume number {number} or paper {pdf_name}\"\n                }\n            yaml_content = yaml.dump(paper_dict)\n            return Response(content=yaml_content, media_type=\"application/x-yaml\")\n</code></pre>"},{"location":"#ceurspt.webserver.WebServer.getPaper","title":"<code>getPaper(number, pdf_name, exceptionOnFail=True)</code>","text":"<p>get the paper for the given volume number and pdf_name</p> <p>Parameters:</p> Name Type Description Default <code>number(int)</code> <p>the number of the volume the paper is part of</p> required <code>pdf_name(str)</code> <p>the pdf name of the paper</p> required <code>exceptionOnFail(bool)</code> <p>if True raise an exception on failure</p> required <p>Returns:</p> Name Type Description <code>Paper</code> <code>Paper</code> <p>the paper or None if the paper is not found</p> Source code in <code>ceurspt/webserver.py</code> <pre><code>def getPaper(\n    self, number: int, pdf_name: str, exceptionOnFail: bool = True\n) -&gt; Paper:\n    \"\"\"\n    get the paper for the given volume number and pdf_name\n\n    Args:\n        number(int): the number of the volume the paper is part of\n        pdf_name(str): the pdf name of the paper\n        exceptionOnFail(bool): if True raise an exception on failure\n\n    Returns:\n        Paper: the paper or None if the paper is not found\n    \"\"\"\n    paper = self.pm.getPaper(number, pdf_name)\n    if paper is None and exceptionOnFail:\n        raise HTTPException(\n            status_code=404, detail=f\"paper Vol-{number}/{pdf_name}.pdf not found\"\n        )\n    return paper\n</code></pre>"},{"location":"#ceurspt.webserver.WebServer.getVolume","title":"<code>getVolume(number)</code>","text":"<p>get the volume for the given number</p> <p>Parameters:</p> Name Type Description Default <code>number(int)</code> <p>the number of the volume to fetch</p> required <p>Returns:</p> Name Type Description <code>Volume</code> <code>Volume</code> <p>the volume or None if the volume number is not known</p> Source code in <code>ceurspt/webserver.py</code> <pre><code>def getVolume(self, number: int) -&gt; Volume:\n    \"\"\"\n    get the volume for the given number\n\n    Args:\n        number(int): the number of the volume to fetch\n\n    Returns:\n        Volume: the volume or None if the volume number is not known\n    \"\"\"\n    vol = self.vm.getVolume(number)\n    return vol\n</code></pre>"},{"location":"#ceurspt.webserver.WebServer.volumeHtml","title":"<code>volumeHtml(number, ext='.pdf')</code>","text":"<p>get html Response for the given volume by number Args:     number: volume number     ext: file extension</p> Source code in <code>ceurspt/webserver.py</code> <pre><code>def volumeHtml(self, number: int, ext: str = \".pdf\") -&gt; HTMLResponse:\n    \"\"\"\n    get html Response for the given volume by number\n    Args:\n        number: volume number\n        ext: file extension\n    \"\"\"\n    vol = self.getVolume(number)\n    if vol:\n        content = vol.getHtml(ext=ext, fixLinks=True)\n        return HTMLResponse(content=content, status_code=200)\n    else:\n        content = vol.get_empty_volume_page()\n        return HTMLResponse(content=content, status_code=200)\n</code></pre>"}]}