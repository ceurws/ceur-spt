#!/bin/bash
# WF 2020-06-03: initial version
# WF 2023-11-18
# Enhanced with improved help/usage, error handling, and additional features

# ansi colors
blue='\033[0;34m'
red='\033[0;31m'
green='\033[0;32m'
endColor='\033[0m'

# prepare python environment
export PYTHON_PATH="."
export PYTHONWARNINGS="ignore::DeprecationWarning"
python="python3"

# prepare virtual environment 
venv_path=".venv"

# prepare options
package=ceurspt
background=""
log=""
test_name=""

# Function to display colored messages
color_msg() {
  local l_color="$1"
  local l_msg="$2"
  echo -e "${l_color}$l_msg${endColor}"
}

# Function to display usage information
usage() {
  color_msg $blue "Usage: $0 [OPTIONS]"
  echo "Options:"
  echo "  -b, --background  Run tests in the background and log output."
  echo "  -d, --debug       Show environment for debugging."
  echo "  -g, --green       Run tests using the green test runner."
  echo "  -h, --help        Display this help message."
  echo "  -p, --python      Specify the Python interpreter to use."
  echo "  -tn, --test_name  Run only the specified test module."
  echo "  --venv        Use a virtual environment for testing."
  echo ""
  echo "Example:"
  echo "  $0 --python python3.10 --background"
  exit 1
}

# Function to handle errors
error() {
  local l_msg="$1"
  color_msg $red "Error: $l_msg" 1>&2
  usage
  exit 1
}

# Test with green
# Install green if necessary and run tests
test_with_green() {
  if ! pip list | grep -q "^green "; then
    pip install green
  fi
  green_options=""
  if [ ! -z "$test_name" ]; then
    green_options="tests.$test_name"
  fi
  green $green_options -s 1
}

# Test with unittest
test_with_unittest() {
  if [ ! -z "$test_name" ]; then
    options="tests.$test_name"
  else
    options="discover"   
  fi
  $python -m unittest $options
}

# setup virtual venv environment
# run scripts/install in that environment
# if any files in tests or corpus have been modified
setup_and_activate_venv() {
  if [ ! -d "$venv_path" ]; then
    $python -m venv $venv_path
  fi
  source $venv_path/bin/activate

  # File used as a reference to last install
  local ref_file="$venv_path/.last_install"

  # Create the reference file if it doesn't exist
  if [ ! -f "$ref_file" ]; then
    touch "$ref_file"
  fi

  # Check if there are new changes in tests or package directories
  if find tests $package -type f -newer "$ref_file" | grep -q .; then
    color_msg $blue "New changes detected in tests or corpus directories. Running scripts/install."
    pip install --upgrade pip
    scripts/install
    # Update the reference file's modification time
    touch "$ref_file"
  else
    color_msg $green "No new changes in tests or corpus directories."
  fi
}

while [ "$1" != "" ]; do
    option="$1"
    case $option in
        -b|--background)
            background="nohup " 
            logdir="/var/log/$package"
            sudo mkdir -p $logdir
            me=$(whoami)
            sudo chown $me $logdir
            timestamp=$(date "+%Y-%m-%d-%H_%M_%S")
            log=$logdir/${timestamp}.log
            echo "Test started $timestamp" >$log
            nohup $python -m unittest discover 2>&1 >>$log&
            exit 0
            ;;
        -d|--debug)
            # Show environment for debugging
            env
            exit 0
            ;;
        -g|--green)
            test_with_green
            exit 0
            ;;
        -h|--help)
            usage
            ;;
        -p|--python)
            shift
            if [ -z "$1" ]; then
                error "Missing argument for --python"
            fi
            python="$1"
            ;;
        -tn|--test_name)
            shift
            if [ -z "$1" ]; then
                error "Missing argument for --test_name"
            fi
            test_name="$1"
            ;;
        --venv)
            setup_and_activate_venv
            ;;
        *)
            error "Invalid option: $option"
            ;;
    esac
    shift
done

# Test using unittest module
test_with_unittest
